
i2c_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080027c8  080027c8  000037c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002830  08002830  00004088  2**0
                  CONTENTS
  4 .ARM          00000000  08002830  08002830  00004088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002830  08002830  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002830  08002830  00003830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002834  08002834  00003834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08002838  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000088  080028c0  00004088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080028c0  000042ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f43  00000000  00000000  000040b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c5  00000000  00000000  0000cff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0000e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e8  00000000  00000000  0000ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fc8  00000000  00000000  0000f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b78b  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008453a  00000000  00000000  00031ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002958  00000000  00000000  000b6248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b8ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b0 	.word	0x080027b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080027b0 	.word	0x080027b0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint8_t i = 0, ret;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fa6d 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f859 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f8eb 	bl	8000338 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000162:	f000 f891 	bl	8000288 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f8bd 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_Delay(1000);
 800016a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800016e:	f000 fac3 	bl	80006f8 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 8000172:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000176:	221a      	movs	r2, #26
 8000178:	491e      	ldr	r1, [pc, #120]	@ (80001f4 <main+0xa8>)
 800017a:	481f      	ldr	r0, [pc, #124]	@ (80001f8 <main+0xac>)
 800017c:	f001 fc94 	bl	8001aa8 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000180:	2301      	movs	r3, #1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e028      	b.n	80001d8 <main+0x8c>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	b29b      	uxth	r3, r3
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	b299      	uxth	r1, r3
 800018e:	2305      	movs	r3, #5
 8000190:	2203      	movs	r2, #3
 8000192:	481a      	ldr	r0, [pc, #104]	@ (80001fc <main+0xb0>)
 8000194:	f000 fe80 	bl	8000e98 <HAL_I2C_IsDeviceReady>
 8000198:	4603      	mov	r3, r0
 800019a:	71bb      	strb	r3, [r7, #6]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 800019c:	79bb      	ldrb	r3, [r7, #6]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d007      	beq.n	80001b2 <main+0x66>
      {
          HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80001a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001a6:	2204      	movs	r2, #4
 80001a8:	4915      	ldr	r1, [pc, #84]	@ (8000200 <main+0xb4>)
 80001aa:	4813      	ldr	r0, [pc, #76]	@ (80001f8 <main+0xac>)
 80001ac:	f001 fc7c 	bl	8001aa8 <HAL_UART_Transmit>
 80001b0:	e00f      	b.n	80001d2 <main+0x86>
      }
      else if(ret == HAL_OK)
 80001b2:	79bb      	ldrb	r3, [r7, #6]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d10c      	bne.n	80001d2 <main+0x86>
      {
          sprintf(Buffer, "0x%X", i);
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	461a      	mov	r2, r3
 80001bc:	4911      	ldr	r1, [pc, #68]	@ (8000204 <main+0xb8>)
 80001be:	4812      	ldr	r0, [pc, #72]	@ (8000208 <main+0xbc>)
 80001c0:	f001 fe46 	bl	8001e50 <siprintf>
          HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 80001c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001c8:	2219      	movs	r2, #25
 80001ca:	490f      	ldr	r1, [pc, #60]	@ (8000208 <main+0xbc>)
 80001cc:	480a      	ldr	r0, [pc, #40]	@ (80001f8 <main+0xac>)
 80001ce:	f001 fc6b 	bl	8001aa8 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	dad2      	bge.n	8000186 <main+0x3a>
      }
  }
  HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 80001e0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001e4:	220b      	movs	r2, #11
 80001e6:	4909      	ldr	r1, [pc, #36]	@ (800020c <main+0xc0>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <main+0xac>)
 80001ea:	f001 fc5d 	bl	8001aa8 <HAL_UART_Transmit>
  /*--[ Scanning Done ]--*/

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ee:	bf00      	nop
 80001f0:	e7fd      	b.n	80001ee <main+0xa2>
 80001f2:	bf00      	nop
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	200000a4 	.word	0x200000a4
 8000200:	20000000 	.word	0x20000000
 8000204:	080027c8 	.word	0x080027c8
 8000208:	20000140 	.word	0x20000140
 800020c:	20000020 	.word	0x20000020

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	@ 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fe36 	bl	8001e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4618      	mov	r0, r3
 8000248:	f000 ffce 	bl	80011e8 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000252:	f000 f89f 	bl	8000394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fa3c 	bl	80016ec <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f88b 	bl	8000394 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	@ 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <MX_I2C1_Init+0x50>)
 800028e:	4a13      	ldr	r2, [pc, #76]	@ (80002dc <MX_I2C1_Init+0x54>)
 8000290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000292:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <MX_I2C1_Init+0x50>)
 8000294:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <MX_I2C1_Init+0x58>)
 8000296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b8:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002be:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c4:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <MX_I2C1_Init+0x50>)
 80002c6:	f000 fca3 	bl	8000c10 <HAL_I2C_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 f860 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200000a4 	.word	0x200000a4
 80002dc:	40005400 	.word	0x40005400
 80002e0:	000186a0 	.word	0x000186a0

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <MX_USART1_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 800031c:	f001 fb74 	bl	8001a08 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f835 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200000f8 	.word	0x200000f8
 8000334:	40013800 	.word	0x40013800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <MX_GPIO_Init+0x58>)
 8000344:	f043 0320 	orr.w	r3, r3, #32
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0320 	and.w	r3, r3, #32
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <MX_GPIO_Init+0x58>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <MX_GPIO_Init+0x58>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a07      	ldr	r2, [pc, #28]	@ (8000390 <MX_GPIO_Init+0x58>)
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <MX_GPIO_Init+0x58>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0308 	and.w	r3, r3, #8
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <Error_Handler+0x8>

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a14      	ldr	r2, [pc, #80]	@ (80003fc <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	@ (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <HAL_I2C_MspInit+0x70>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d123      	bne.n	800046c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800043c:	23c0      	movs	r3, #192	@ 0xc0
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000440:	2312      	movs	r3, #18
 8000442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000444:	2303      	movs	r3, #3
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	480b      	ldr	r0, [pc, #44]	@ (800047c <HAL_I2C_MspInit+0x78>)
 8000450:	f000 fa5a 	bl	8000908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	4a07      	ldr	r2, [pc, #28]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 800045a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800045e:	61d3      	str	r3, [r2, #28]
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40005400 	.word	0x40005400
 8000478:	40021000 	.word	0x40021000
 800047c:	40010c00 	.word	0x40010c00

08000480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <HAL_UART_MspInit+0x8c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d131      	bne.n	8000504 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <HAL_UART_MspInit+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <HAL_UART_MspInit+0x90>)
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <HAL_UART_MspInit+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <HAL_UART_MspInit+0x90>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480b      	ldr	r0, [pc, #44]	@ (8000514 <HAL_UART_MspInit+0x94>)
 80004e6:	f000 fa0f 	bl	8000908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <HAL_UART_MspInit+0x94>)
 8000500:	f000 fa02 	bl	8000908 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40013800 	.word	0x40013800
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <NMI_Handler+0x4>

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <MemManage_Handler+0x4>

08000530 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <UsageFault_Handler+0x4>

08000540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f8aa 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <_sbrk+0x5c>)
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <_sbrk+0x60>)
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <_sbrk+0x64>)
 800058e:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <_sbrk+0x68>)
 8000590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	429a      	cmp	r2, r3
 800059e:	d207      	bcs.n	80005b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a0:	f001 fc7e 	bl	8001ea0 <__errno>
 80005a4:	4603      	mov	r3, r0
 80005a6:	220c      	movs	r2, #12
 80005a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e009      	b.n	80005c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <_sbrk+0x64>)
 80005c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20005000 	.word	0x20005000
 80005d0:	00000400 	.word	0x00000400
 80005d4:	2000015c 	.word	0x2000015c
 80005d8:	200002b0 	.word	0x200002b0

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff fff8 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ee:	490c      	ldr	r1, [pc, #48]	@ (8000620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000604:	4c09      	ldr	r4, [pc, #36]	@ (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 fc4b 	bl	8001eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fd99 	bl	800014c <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000624:	08002838 	.word	0x08002838
  ldr r2, =_sbss
 8000628:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800062c:	200002ac 	.word	0x200002ac

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f92b 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff fea6 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f935 	bl	80008ee <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f90b 	bl	80008b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	20000034 	.word	0x20000034
 80006bc:	20000030 	.word	0x20000030

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000034 	.word	0x20000034
 80006e0:	20000160 	.word	0x20000160

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	@ (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000160 	.word	0x20000160

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff0 	bl	80006e4 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffe0 	bl	80006e4 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000034 	.word	0x20000034

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	@ 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	@ 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff90 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	@ (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff49 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c8:	f7ff ff5e 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff ff90 	bl	80007f8 <NVIC_EncodePriority>
 80008d8:	4602      	mov	r2, r0
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5f 	bl	80007a4 <__NVIC_SetPriority>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffb0 	bl	800085c <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b480      	push	{r7}
 800090a:	b08b      	sub	sp, #44	@ 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e169      	b.n	8000bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800091c:	2201      	movs	r2, #1
 800091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8158 	bne.w	8000bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d05e      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000944:	4a98      	ldr	r2, [pc, #608]	@ (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d875      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800094a:	4a98      	ldr	r2, [pc, #608]	@ (8000bac <HAL_GPIO_Init+0x2a4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d058      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000950:	4a96      	ldr	r2, [pc, #600]	@ (8000bac <HAL_GPIO_Init+0x2a4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d86f      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000956:	4a96      	ldr	r2, [pc, #600]	@ (8000bb0 <HAL_GPIO_Init+0x2a8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d052      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 800095c:	4a94      	ldr	r2, [pc, #592]	@ (8000bb0 <HAL_GPIO_Init+0x2a8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d869      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000962:	4a94      	ldr	r2, [pc, #592]	@ (8000bb4 <HAL_GPIO_Init+0x2ac>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d04c      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000968:	4a92      	ldr	r2, [pc, #584]	@ (8000bb4 <HAL_GPIO_Init+0x2ac>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d863      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800096e:	4a92      	ldr	r2, [pc, #584]	@ (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d046      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000974:	4a90      	ldr	r2, [pc, #576]	@ (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d85d      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d82a      	bhi.n	80009d4 <HAL_GPIO_Init+0xcc>
 800097e:	2b12      	cmp	r3, #18
 8000980:	d859      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000982:	a201      	add	r2, pc, #4	@ (adr r2, 8000988 <HAL_GPIO_Init+0x80>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a03 	.word	0x08000a03
 800098c:	080009dd 	.word	0x080009dd
 8000990:	080009ef 	.word	0x080009ef
 8000994:	08000a31 	.word	0x08000a31
 8000998:	08000a37 	.word	0x08000a37
 800099c:	08000a37 	.word	0x08000a37
 80009a0:	08000a37 	.word	0x08000a37
 80009a4:	08000a37 	.word	0x08000a37
 80009a8:	08000a37 	.word	0x08000a37
 80009ac:	08000a37 	.word	0x08000a37
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000a37 	.word	0x08000a37
 80009b8:	08000a37 	.word	0x08000a37
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	08000a37 	.word	0x08000a37
 80009c8:	08000a37 	.word	0x08000a37
 80009cc:	080009e5 	.word	0x080009e5
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	4a79      	ldr	r2, [pc, #484]	@ (8000bbc <HAL_GPIO_Init+0x2b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009da:	e02c      	b.n	8000a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e029      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	3304      	adds	r3, #4
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e024      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e01f      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	330c      	adds	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e01a      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e013      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	611a      	str	r2, [r3, #16]
          break;
 8000a22:	e009      	b.n	8000a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	615a      	str	r2, [r3, #20]
          break;
 8000a2e:	e003      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          break;
 8000a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d801      	bhi.n	8000a42 <HAL_GPIO_Init+0x13a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	e001      	b.n	8000a46 <HAL_GPIO_Init+0x13e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d802      	bhi.n	8000a54 <HAL_GPIO_Init+0x14c>
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0x152>
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	3b08      	subs	r3, #8
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	210f      	movs	r1, #15
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	6a39      	ldr	r1, [r7, #32]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80b1 	beq.w	8000bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a88:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa0:	4a48      	ldr	r2, [pc, #288]	@ (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a40      	ldr	r2, [pc, #256]	@ (8000bc8 <HAL_GPIO_Init+0x2c0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1ec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	@ (8000bcc <HAL_GPIO_Init+0x2c4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1e8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd0 <HAL_GPIO_Init+0x2c8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e4>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd4 <HAL_GPIO_Init+0x2cc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1e0>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b06:	492f      	ldr	r1, [pc, #188]	@ (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	492c      	ldr	r1, [pc, #176]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4928      	ldr	r1, [pc, #160]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	4922      	ldr	r1, [pc, #136]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	491e      	ldr	r1, [pc, #120]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4918      	ldr	r1, [pc, #96]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4914      	ldr	r1, [pc, #80]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	490e      	ldr	r1, [pc, #56]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
 8000ba4:	e021      	b.n	8000bea <HAL_GPIO_Init+0x2e2>
 8000ba6:	bf00      	nop
 8000ba8:	10320000 	.word	0x10320000
 8000bac:	10310000 	.word	0x10310000
 8000bb0:	10220000 	.word	0x10220000
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	10120000 	.word	0x10120000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_GPIO_Init+0x304>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <HAL_GPIO_Init+0x304>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	3301      	adds	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f47f ae8e 	bne.w	800091c <HAL_GPIO_Init+0x14>
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	372c      	adds	r7, #44	@ 0x2c
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e12b      	b.n	8000e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d106      	bne.n	8000c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fbe4 	bl	8000404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2224      	movs	r2, #36	@ 0x24
 8000c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0201 	bic.w	r2, r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c74:	f000 fe82 	bl	800197c <HAL_RCC_GetPCLK1Freq>
 8000c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	4a81      	ldr	r2, [pc, #516]	@ (8000e84 <HAL_I2C_Init+0x274>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d807      	bhi.n	8000c94 <HAL_I2C_Init+0x84>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4a80      	ldr	r2, [pc, #512]	@ (8000e88 <HAL_I2C_Init+0x278>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	bf94      	ite	ls
 8000c8c:	2301      	movls	r3, #1
 8000c8e:	2300      	movhi	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	e006      	b.n	8000ca2 <HAL_I2C_Init+0x92>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4a7d      	ldr	r2, [pc, #500]	@ (8000e8c <HAL_I2C_Init+0x27c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	bf94      	ite	ls
 8000c9c:	2301      	movls	r3, #1
 8000c9e:	2300      	movhi	r3, #0
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e0e7      	b.n	8000e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4a78      	ldr	r2, [pc, #480]	@ (8000e90 <HAL_I2C_Init+0x280>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	0c9b      	lsrs	r3, r3, #18
 8000cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8000e84 <HAL_I2C_Init+0x274>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d802      	bhi.n	8000ce4 <HAL_I2C_Init+0xd4>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	e009      	b.n	8000cf8 <HAL_I2C_Init+0xe8>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a69      	ldr	r2, [pc, #420]	@ (8000e94 <HAL_I2C_Init+0x284>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	099b      	lsrs	r3, r3, #6
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000d0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	495c      	ldr	r1, [pc, #368]	@ (8000e84 <HAL_I2C_Init+0x274>)
 8000d14:	428b      	cmp	r3, r1
 8000d16:	d819      	bhi.n	8000d4c <HAL_I2C_Init+0x13c>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	1e59      	subs	r1, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d26:	1c59      	adds	r1, r3, #1
 8000d28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000d2c:	400b      	ands	r3, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00a      	beq.n	8000d48 <HAL_I2C_Init+0x138>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1e59      	subs	r1, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d40:	3301      	adds	r3, #1
 8000d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d46:	e051      	b.n	8000dec <HAL_I2C_Init+0x1dc>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e04f      	b.n	8000dec <HAL_I2C_Init+0x1dc>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d111      	bne.n	8000d78 <HAL_I2C_Init+0x168>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	1e58      	subs	r0, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6859      	ldr	r1, [r3, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	440b      	add	r3, r1
 8000d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d66:	3301      	adds	r3, #1
 8000d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf0c      	ite	eq
 8000d70:	2301      	moveq	r3, #1
 8000d72:	2300      	movne	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	e012      	b.n	8000d9e <HAL_I2C_Init+0x18e>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1e58      	subs	r0, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	0099      	lsls	r1, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf0c      	ite	eq
 8000d98:	2301      	moveq	r3, #1
 8000d9a:	2300      	movne	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_I2C_Init+0x196>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e022      	b.n	8000dec <HAL_I2C_Init+0x1dc>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10e      	bne.n	8000dcc <HAL_I2C_Init+0x1bc>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1e58      	subs	r0, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6859      	ldr	r1, [r3, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	440b      	add	r3, r1
 8000dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dca:	e00f      	b.n	8000dec <HAL_I2C_Init+0x1dc>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1e58      	subs	r0, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6859      	ldr	r1, [r3, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	0099      	lsls	r1, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	6809      	ldr	r1, [r1, #0]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69da      	ldr	r2, [r3, #28]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000e1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6911      	ldr	r1, [r2, #16]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68d2      	ldr	r2, [r2, #12]
 8000e26:	4311      	orrs	r1, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2220      	movs	r2, #32
 8000e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	000186a0 	.word	0x000186a0
 8000e88:	001e847f 	.word	0x001e847f
 8000e8c:	003d08ff 	.word	0x003d08ff
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	10624dd3 	.word	0x10624dd3

08000e98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff fc1c 	bl	80006e4 <HAL_GetTick>
 8000eac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b20      	cmp	r3, #32
 8000ebc:	f040 8111 	bne.w	80010e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2319      	movs	r3, #25
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4988      	ldr	r1, [pc, #544]	@ (80010ec <HAL_I2C_IsDeviceReady+0x254>)
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f912 	bl	80010f4 <I2C_WaitOnFlagUntilTimeout>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e104      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_I2C_IsDeviceReady+0x50>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e0fd      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d007      	beq.n	8000f0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0201 	orr.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2224      	movs	r2, #36	@ 0x24
 8000f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a70      	ldr	r2, [pc, #448]	@ (80010f0 <HAL_I2C_IsDeviceReady+0x258>)
 8000f30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f8d0 	bl	80010f4 <I2C_WaitOnFlagUntilTimeout>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00d      	beq.n	8000f76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f68:	d103      	bne.n	8000f72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e0b6      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f76:	897b      	ldrh	r3, [r7, #10]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8000f84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fbad 	bl	80006e4 <HAL_GetTick>
 8000f8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	bf0c      	ite	eq
 8000f9a:	2301      	moveq	r3, #1
 8000f9c:	2300      	movne	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000fba:	e025      	b.n	8001008 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000fbc:	f7ff fb92 	bl	80006e4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d302      	bcc.n	8000fd2 <HAL_I2C_IsDeviceReady+0x13a>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	22a0      	movs	r2, #160	@ 0xa0
 8000fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2ba0      	cmp	r3, #160	@ 0xa0
 8001012:	d005      	beq.n	8001020 <HAL_I2C_IsDeviceReady+0x188>
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_I2C_IsDeviceReady+0x188>
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0cd      	beq.n	8000fbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2220      	movs	r2, #32
 8001024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d129      	bne.n	800108a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001044:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2319      	movs	r3, #25
 8001062:	2201      	movs	r2, #1
 8001064:	4921      	ldr	r1, [pc, #132]	@ (80010ec <HAL_I2C_IsDeviceReady+0x254>)
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f844 	bl	80010f4 <I2C_WaitOnFlagUntilTimeout>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e036      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2220      	movs	r2, #32
 800107a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e02c      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001098:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80010a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2319      	movs	r3, #25
 80010aa:	2201      	movs	r2, #1
 80010ac:	490f      	ldr	r1, [pc, #60]	@ (80010ec <HAL_I2C_IsDeviceReady+0x254>)
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f820 	bl	80010f4 <I2C_WaitOnFlagUntilTimeout>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e012      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f4ff af32 	bcc.w	8000f32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2220      	movs	r2, #32
 80010d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80010e2:	2302      	movs	r3, #2
  }
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	00100002 	.word	0x00100002
 80010f0:	ffff0000 	.word	0xffff0000

080010f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001104:	e048      	b.n	8001198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d044      	beq.n	8001198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800110e:	f7ff fae9 	bl	80006e4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d302      	bcc.n	8001124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d139      	bne.n	8001198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10d      	bne.n	800114a <I2C_WaitOnFlagUntilTimeout+0x56>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	43da      	mvns	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4013      	ands	r3, r2
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	e00c      	b.n	8001164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	43da      	mvns	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4013      	ands	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	429a      	cmp	r2, r3
 8001168:	d116      	bne.n	8001198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2220      	movs	r2, #32
 8001174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	f043 0220 	orr.w	r2, r3, #32
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e023      	b.n	80011e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10d      	bne.n	80011be <I2C_WaitOnFlagUntilTimeout+0xca>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	43da      	mvns	r2, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	4013      	ands	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	e00c      	b.n	80011d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	43da      	mvns	r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	4013      	ands	r3, r2
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d093      	beq.n	8001106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e272      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8087 	beq.w	8001316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001208:	4b92      	ldr	r3, [pc, #584]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b04      	cmp	r3, #4
 8001212:	d00c      	beq.n	800122e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001214:	4b8f      	ldr	r3, [pc, #572]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d112      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
 8001220:	4b8c      	ldr	r3, [pc, #560]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4b89      	ldr	r3, [pc, #548]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d06c      	beq.n	8001314 <HAL_RCC_OscConfig+0x12c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d168      	bne.n	8001314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e24c      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x76>
 8001250:	4b80      	ldr	r3, [pc, #512]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a7f      	ldr	r2, [pc, #508]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e02e      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x98>
 8001266:	4b7b      	ldr	r3, [pc, #492]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7a      	ldr	r2, [pc, #488]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b78      	ldr	r3, [pc, #480]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a77      	ldr	r2, [pc, #476]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0xbc>
 800128a:	4b72      	ldr	r3, [pc, #456]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a71      	ldr	r2, [pc, #452]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6f      	ldr	r3, [pc, #444]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6e      	ldr	r2, [pc, #440]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 80012a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b68      	ldr	r3, [pc, #416]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a67      	ldr	r2, [pc, #412]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fa0e 	bl	80006e4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fa0a 	bl	80006e4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e200      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b5d      	ldr	r3, [pc, #372]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xe4>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff f9fa 	bl	80006e4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff f9f6 	bl	80006e4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1ec      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b53      	ldr	r3, [pc, #332]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x10c>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001322:	4b4c      	ldr	r3, [pc, #304]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132e:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x18c>
 800133a:	4b46      	ldr	r3, [pc, #280]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x176>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1c0      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b3d      	ldr	r3, [pc, #244]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4939      	ldr	r1, [pc, #228]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <HAL_RCC_OscConfig+0x270>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff f9af 	bl	80006e4 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff f9ab 	bl	80006e4 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a1      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4927      	ldr	r1, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <HAL_RCC_OscConfig+0x270>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff f98e 	bl	80006e4 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff f98a 	bl	80006e4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e180      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03a      	beq.n	800146c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d019      	beq.n	8001432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <HAL_RCC_OscConfig+0x274>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff f96e 	bl	80006e4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff f96a 	bl	80006e4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e160      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 face 	bl	80019cc <RCC_Delay>
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_RCC_OscConfig+0x274>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001438:	f7ff f954 	bl	80006e4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	e00f      	b.n	8001460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff f950 	bl	80006e4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d908      	bls.n	8001460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e146      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	42420000 	.word	0x42420000
 800145c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b92      	ldr	r3, [pc, #584]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e9      	bne.n	8001440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a6 	beq.w	80015c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b8b      	ldr	r3, [pc, #556]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10d      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b88      	ldr	r3, [pc, #544]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a87      	ldr	r2, [pc, #540]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b85      	ldr	r3, [pc, #532]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	4b82      	ldr	r3, [pc, #520]	@ (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b2:	4b7f      	ldr	r3, [pc, #508]	@ (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7e      	ldr	r2, [pc, #504]	@ (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014be:	f7ff f911 	bl	80006e4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff f90d 	bl	80006e4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	@ 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e103      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	4b75      	ldr	r3, [pc, #468]	@ (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x312>
 80014ec:	4b6f      	ldr	r3, [pc, #444]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e02d      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x334>
 8001502:	4b6a      	ldr	r3, [pc, #424]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a69      	ldr	r2, [pc, #420]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	4b67      	ldr	r3, [pc, #412]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a66      	ldr	r2, [pc, #408]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	e01c      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x356>
 8001524:	4b61      	ldr	r3, [pc, #388]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a60      	ldr	r2, [pc, #384]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	4b5e      	ldr	r3, [pc, #376]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a5d      	ldr	r2, [pc, #372]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e00b      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 800153e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a5a      	ldr	r2, [pc, #360]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b58      	ldr	r3, [pc, #352]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a57      	ldr	r2, [pc, #348]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d015      	beq.n	800158a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff f8c1 	bl	80006e4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff f8bd 	bl	80006e4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0b1      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	4b4b      	ldr	r3, [pc, #300]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ee      	beq.n	8001566 <HAL_RCC_OscConfig+0x37e>
 8001588:	e014      	b.n	80015b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff f8ab 	bl	80006e4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff f8a7 	bl	80006e4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e09b      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	4b40      	ldr	r3, [pc, #256]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ba:	4b3c      	ldr	r3, [pc, #240]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a3b      	ldr	r2, [pc, #236]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8087 	beq.w	80016de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d061      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d146      	bne.n	8001672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff f87b 	bl	80006e4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff f877 	bl	80006e4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e06d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001618:	d108      	bne.n	800162c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161a:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4921      	ldr	r1, [pc, #132]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a19      	ldr	r1, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	430b      	orrs	r3, r1
 800163e:	491b      	ldr	r1, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff f84b 	bl	80006e4 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f847 	bl	80006e4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x46a>
 8001670:	e035      	b.n	80016de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff f834 	bl	80006e4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f830 	bl	80006e4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e026      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x498>
 800169e:	e01e      	b.n	80016de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e019      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_OscConfig+0x500>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0d0      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b6a      	ldr	r3, [pc, #424]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d910      	bls.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b67      	ldr	r3, [pc, #412]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4965      	ldr	r1, [pc, #404]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800176a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d040      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d115      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e073      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06b      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b39      	ldr	r3, [pc, #228]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4936      	ldr	r1, [pc, #216]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7fe ff82 	bl	80006e4 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7fe ff7e 	bl	80006e4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e053      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d210      	bcs.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4922      	ldr	r1, [pc, #136]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	@ (80018b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x1d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fee0 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	080027d0 	.word	0x080027d0
 80018b8:	2000002c 	.word	0x2000002c
 80018bc:	20000030 	.word	0x20000030

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x94>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x30>
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x36>
 80018ee:	e027      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x98>)
 80018f2:	613b      	str	r3, [r7, #16]
      break;
 80018f4:	e027      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d010      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x94>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0c5b      	lsrs	r3, r3, #17
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <HAL_RCC_GetSysClockFreq+0xa0>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x98>)
 8001922:	fb03 f202 	mul.w	r2, r3, r2
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e004      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a0c      	ldr	r2, [pc, #48]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	613b      	str	r3, [r7, #16]
      break;
 800193e:	e002      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x98>)
 8001942:	613b      	str	r3, [r7, #16]
      break;
 8001944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001946:	693b      	ldr	r3, [r7, #16]
}
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	007a1200 	.word	0x007a1200
 800195c:	080027e8 	.word	0x080027e8
 8001960:	080027f8 	.word	0x080027f8
 8001964:	003d0900 	.word	0x003d0900

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b02      	ldr	r3, [pc, #8]	@ (8001978 <HAL_RCC_GetHCLKFreq+0x10>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	2000002c 	.word	0x2000002c

0800197c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001980:	f7ff fff2 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	@ (80019a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	080027e0 	.word	0x080027e0

080019a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a8:	f7ff ffde 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0adb      	lsrs	r3, r3, #11
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4903      	ldr	r1, [pc, #12]	@ (80019c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	080027e0 	.word	0x080027e0

080019cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <RCC_Delay+0x34>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <RCC_Delay+0x38>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0a5b      	lsrs	r3, r3, #9
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019e8:	bf00      	nop
  }
  while (Delay --);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e5a      	subs	r2, r3, #1
 80019ee:	60fa      	str	r2, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f9      	bne.n	80019e8 <RCC_Delay+0x1c>
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	2000002c 	.word	0x2000002c
 8001a04:	10624dd3 	.word	0x10624dd3

08001a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e042      	b.n	8001aa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fd26 	bl	8000480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2224      	movs	r2, #36	@ 0x24
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f971 	bl	8001d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d175      	bne.n	8001bb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_UART_Transmit+0x2c>
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e06e      	b.n	8001bb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2221      	movs	r2, #33	@ 0x21
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ae6:	f7fe fdfd 	bl	80006e4 <HAL_GetTick>
 8001aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b00:	d108      	bne.n	8001b14 <HAL_UART_Transmit+0x6c>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d104      	bne.n	8001b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	e003      	b.n	8001b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b1c:	e02e      	b.n	8001b7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f848 	bl	8001bbe <UART_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e03a      	b.n	8001bb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10b      	bne.n	8001b5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	e007      	b.n	8001b6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1cb      	bne.n	8001b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f814 	bl	8001bbe <UART_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e006      	b.n	8001bb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bb4:	2302      	movs	r3, #2
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bce:	e03b      	b.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd6:	d037      	beq.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd8:	f7fe fd84 	bl	80006e4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d302      	bcc.n	8001bee <UART_WaitOnFlagUntilTimeout+0x30>
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e03a      	b.n	8001c68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b80      	cmp	r3, #128	@ 0x80
 8001c04:	d020      	beq.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b40      	cmp	r3, #64	@ 0x40
 8001c0a:	d01d      	beq.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d116      	bne.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f81d 	bl	8001c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2208      	movs	r2, #8
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00f      	b.n	8001c68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4013      	ands	r3, r2
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d0b4      	beq.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b095      	sub	sp, #84	@ 0x54
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c82:	e853 3f00 	ldrex	r3, [r3]
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	330c      	adds	r3, #12
 8001c96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c98:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ca0:	e841 2300 	strex	r3, r2, [r1]
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e5      	bne.n	8001c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	e853 3f00 	ldrex	r3, [r3]
 8001cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cd4:	e841 2300 	strex	r3, r2, [r1]
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e5      	bne.n	8001cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d119      	bne.n	8001d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	330c      	adds	r3, #12
 8001cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	e853 3f00 	ldrex	r3, [r3]
 8001cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f023 0310 	bic.w	r3, r3, #16
 8001cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	330c      	adds	r3, #12
 8001d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d08:	61ba      	str	r2, [r7, #24]
 8001d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d0c:	6979      	ldr	r1, [r7, #20]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	e841 2300 	strex	r3, r2, [r1]
 8001d14:	613b      	str	r3, [r7, #16]
   return(result);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e5      	bne.n	8001ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d2a:	bf00      	nop
 8001d2c:	3754      	adds	r7, #84	@ 0x54
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001d6e:	f023 030c 	bic.w	r3, r3, #12
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <UART_SetConfig+0x114>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d103      	bne.n	8001da4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d9c:	f7ff fe02 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	e002      	b.n	8001daa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001da4:	f7ff fdea 	bl	800197c <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009a      	lsls	r2, r3, #2
 8001db4:	441a      	add	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <UART_SetConfig+0x118>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	0119      	lsls	r1, r3, #4
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009a      	lsls	r2, r3, #2
 8001dd4:	441a      	add	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <UART_SetConfig+0x118>)
 8001de2:	fba3 0302 	umull	r0, r3, r3, r2
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2064      	movs	r0, #100	@ 0x64
 8001dea:	fb00 f303 	mul.w	r3, r0, r3
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	3332      	adds	r3, #50	@ 0x32
 8001df4:	4a15      	ldr	r2, [pc, #84]	@ (8001e4c <UART_SetConfig+0x118>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e00:	4419      	add	r1, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	009a      	lsls	r2, r3, #2
 8001e0c:	441a      	add	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <UART_SetConfig+0x118>)
 8001e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2064      	movs	r0, #100	@ 0x64
 8001e22:	fb00 f303 	mul.w	r3, r0, r3
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	3332      	adds	r3, #50	@ 0x32
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <UART_SetConfig+0x118>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	440a      	add	r2, r1
 8001e3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	51eb851f 	.word	0x51eb851f

08001e50 <siprintf>:
 8001e50:	b40e      	push	{r1, r2, r3}
 8001e52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001e56:	b500      	push	{lr}
 8001e58:	b09c      	sub	sp, #112	@ 0x70
 8001e5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8001e5c:	9002      	str	r0, [sp, #8]
 8001e5e:	9006      	str	r0, [sp, #24]
 8001e60:	9107      	str	r1, [sp, #28]
 8001e62:	9104      	str	r1, [sp, #16]
 8001e64:	4808      	ldr	r0, [pc, #32]	@ (8001e88 <siprintf+0x38>)
 8001e66:	4909      	ldr	r1, [pc, #36]	@ (8001e8c <siprintf+0x3c>)
 8001e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e6c:	9105      	str	r1, [sp, #20]
 8001e6e:	6800      	ldr	r0, [r0, #0]
 8001e70:	a902      	add	r1, sp, #8
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	f000 f992 	bl	800219c <_svfiprintf_r>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	9b02      	ldr	r3, [sp, #8]
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	b01c      	add	sp, #112	@ 0x70
 8001e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e84:	b003      	add	sp, #12
 8001e86:	4770      	bx	lr
 8001e88:	20000038 	.word	0x20000038
 8001e8c:	ffff0208 	.word	0xffff0208

08001e90 <memset>:
 8001e90:	4603      	mov	r3, r0
 8001e92:	4402      	add	r2, r0
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <memset+0xa>
 8001e98:	4770      	bx	lr
 8001e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9e:	e7f9      	b.n	8001e94 <memset+0x4>

08001ea0 <__errno>:
 8001ea0:	4b01      	ldr	r3, [pc, #4]	@ (8001ea8 <__errno+0x8>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000038 	.word	0x20000038

08001eac <__libc_init_array>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	2600      	movs	r6, #0
 8001eb0:	4d0c      	ldr	r5, [pc, #48]	@ (8001ee4 <__libc_init_array+0x38>)
 8001eb2:	4c0d      	ldr	r4, [pc, #52]	@ (8001ee8 <__libc_init_array+0x3c>)
 8001eb4:	1b64      	subs	r4, r4, r5
 8001eb6:	10a4      	asrs	r4, r4, #2
 8001eb8:	42a6      	cmp	r6, r4
 8001eba:	d109      	bne.n	8001ed0 <__libc_init_array+0x24>
 8001ebc:	f000 fc78 	bl	80027b0 <_init>
 8001ec0:	2600      	movs	r6, #0
 8001ec2:	4d0a      	ldr	r5, [pc, #40]	@ (8001eec <__libc_init_array+0x40>)
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef0 <__libc_init_array+0x44>)
 8001ec6:	1b64      	subs	r4, r4, r5
 8001ec8:	10a4      	asrs	r4, r4, #2
 8001eca:	42a6      	cmp	r6, r4
 8001ecc:	d105      	bne.n	8001eda <__libc_init_array+0x2e>
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
 8001ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed4:	4798      	blx	r3
 8001ed6:	3601      	adds	r6, #1
 8001ed8:	e7ee      	b.n	8001eb8 <__libc_init_array+0xc>
 8001eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ede:	4798      	blx	r3
 8001ee0:	3601      	adds	r6, #1
 8001ee2:	e7f2      	b.n	8001eca <__libc_init_array+0x1e>
 8001ee4:	08002830 	.word	0x08002830
 8001ee8:	08002830 	.word	0x08002830
 8001eec:	08002830 	.word	0x08002830
 8001ef0:	08002834 	.word	0x08002834

08001ef4 <__retarget_lock_acquire_recursive>:
 8001ef4:	4770      	bx	lr

08001ef6 <__retarget_lock_release_recursive>:
 8001ef6:	4770      	bx	lr

08001ef8 <_free_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4605      	mov	r5, r0
 8001efc:	2900      	cmp	r1, #0
 8001efe:	d040      	beq.n	8001f82 <_free_r+0x8a>
 8001f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f04:	1f0c      	subs	r4, r1, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bfb8      	it	lt
 8001f0a:	18e4      	addlt	r4, r4, r3
 8001f0c:	f000 f8de 	bl	80020cc <__malloc_lock>
 8001f10:	4a1c      	ldr	r2, [pc, #112]	@ (8001f84 <_free_r+0x8c>)
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	b933      	cbnz	r3, 8001f24 <_free_r+0x2c>
 8001f16:	6063      	str	r3, [r4, #4]
 8001f18:	6014      	str	r4, [r2, #0]
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f20:	f000 b8da 	b.w	80020d8 <__malloc_unlock>
 8001f24:	42a3      	cmp	r3, r4
 8001f26:	d908      	bls.n	8001f3a <_free_r+0x42>
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	1821      	adds	r1, r4, r0
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	bf01      	itttt	eq
 8001f30:	6819      	ldreq	r1, [r3, #0]
 8001f32:	685b      	ldreq	r3, [r3, #4]
 8001f34:	1809      	addeq	r1, r1, r0
 8001f36:	6021      	streq	r1, [r4, #0]
 8001f38:	e7ed      	b.n	8001f16 <_free_r+0x1e>
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	b10b      	cbz	r3, 8001f44 <_free_r+0x4c>
 8001f40:	42a3      	cmp	r3, r4
 8001f42:	d9fa      	bls.n	8001f3a <_free_r+0x42>
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	1850      	adds	r0, r2, r1
 8001f48:	42a0      	cmp	r0, r4
 8001f4a:	d10b      	bne.n	8001f64 <_free_r+0x6c>
 8001f4c:	6820      	ldr	r0, [r4, #0]
 8001f4e:	4401      	add	r1, r0
 8001f50:	1850      	adds	r0, r2, r1
 8001f52:	4283      	cmp	r3, r0
 8001f54:	6011      	str	r1, [r2, #0]
 8001f56:	d1e0      	bne.n	8001f1a <_free_r+0x22>
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4408      	add	r0, r1
 8001f5e:	6010      	str	r0, [r2, #0]
 8001f60:	6053      	str	r3, [r2, #4]
 8001f62:	e7da      	b.n	8001f1a <_free_r+0x22>
 8001f64:	d902      	bls.n	8001f6c <_free_r+0x74>
 8001f66:	230c      	movs	r3, #12
 8001f68:	602b      	str	r3, [r5, #0]
 8001f6a:	e7d6      	b.n	8001f1a <_free_r+0x22>
 8001f6c:	6820      	ldr	r0, [r4, #0]
 8001f6e:	1821      	adds	r1, r4, r0
 8001f70:	428b      	cmp	r3, r1
 8001f72:	bf01      	itttt	eq
 8001f74:	6819      	ldreq	r1, [r3, #0]
 8001f76:	685b      	ldreq	r3, [r3, #4]
 8001f78:	1809      	addeq	r1, r1, r0
 8001f7a:	6021      	streq	r1, [r4, #0]
 8001f7c:	6063      	str	r3, [r4, #4]
 8001f7e:	6054      	str	r4, [r2, #4]
 8001f80:	e7cb      	b.n	8001f1a <_free_r+0x22>
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	200002a8 	.word	0x200002a8

08001f88 <sbrk_aligned>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8001fc8 <sbrk_aligned+0x40>)
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	6831      	ldr	r1, [r6, #0]
 8001f90:	4605      	mov	r5, r0
 8001f92:	b911      	cbnz	r1, 8001f9a <sbrk_aligned+0x12>
 8001f94:	f000 fbaa 	bl	80026ec <_sbrk_r>
 8001f98:	6030      	str	r0, [r6, #0]
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 fba5 	bl	80026ec <_sbrk_r>
 8001fa2:	1c43      	adds	r3, r0, #1
 8001fa4:	d103      	bne.n	8001fae <sbrk_aligned+0x26>
 8001fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8001faa:	4620      	mov	r0, r4
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	1cc4      	adds	r4, r0, #3
 8001fb0:	f024 0403 	bic.w	r4, r4, #3
 8001fb4:	42a0      	cmp	r0, r4
 8001fb6:	d0f8      	beq.n	8001faa <sbrk_aligned+0x22>
 8001fb8:	1a21      	subs	r1, r4, r0
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f000 fb96 	bl	80026ec <_sbrk_r>
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d1f2      	bne.n	8001faa <sbrk_aligned+0x22>
 8001fc4:	e7ef      	b.n	8001fa6 <sbrk_aligned+0x1e>
 8001fc6:	bf00      	nop
 8001fc8:	200002a4 	.word	0x200002a4

08001fcc <_malloc_r>:
 8001fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd0:	1ccd      	adds	r5, r1, #3
 8001fd2:	f025 0503 	bic.w	r5, r5, #3
 8001fd6:	3508      	adds	r5, #8
 8001fd8:	2d0c      	cmp	r5, #12
 8001fda:	bf38      	it	cc
 8001fdc:	250c      	movcc	r5, #12
 8001fde:	2d00      	cmp	r5, #0
 8001fe0:	4606      	mov	r6, r0
 8001fe2:	db01      	blt.n	8001fe8 <_malloc_r+0x1c>
 8001fe4:	42a9      	cmp	r1, r5
 8001fe6:	d904      	bls.n	8001ff2 <_malloc_r+0x26>
 8001fe8:	230c      	movs	r3, #12
 8001fea:	6033      	str	r3, [r6, #0]
 8001fec:	2000      	movs	r0, #0
 8001fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020c8 <_malloc_r+0xfc>
 8001ff6:	f000 f869 	bl	80020cc <__malloc_lock>
 8001ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8001ffe:	461c      	mov	r4, r3
 8002000:	bb44      	cbnz	r4, 8002054 <_malloc_r+0x88>
 8002002:	4629      	mov	r1, r5
 8002004:	4630      	mov	r0, r6
 8002006:	f7ff ffbf 	bl	8001f88 <sbrk_aligned>
 800200a:	1c43      	adds	r3, r0, #1
 800200c:	4604      	mov	r4, r0
 800200e:	d158      	bne.n	80020c2 <_malloc_r+0xf6>
 8002010:	f8d8 4000 	ldr.w	r4, [r8]
 8002014:	4627      	mov	r7, r4
 8002016:	2f00      	cmp	r7, #0
 8002018:	d143      	bne.n	80020a2 <_malloc_r+0xd6>
 800201a:	2c00      	cmp	r4, #0
 800201c:	d04b      	beq.n	80020b6 <_malloc_r+0xea>
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	4639      	mov	r1, r7
 8002022:	4630      	mov	r0, r6
 8002024:	eb04 0903 	add.w	r9, r4, r3
 8002028:	f000 fb60 	bl	80026ec <_sbrk_r>
 800202c:	4581      	cmp	r9, r0
 800202e:	d142      	bne.n	80020b6 <_malloc_r+0xea>
 8002030:	6821      	ldr	r1, [r4, #0]
 8002032:	4630      	mov	r0, r6
 8002034:	1a6d      	subs	r5, r5, r1
 8002036:	4629      	mov	r1, r5
 8002038:	f7ff ffa6 	bl	8001f88 <sbrk_aligned>
 800203c:	3001      	adds	r0, #1
 800203e:	d03a      	beq.n	80020b6 <_malloc_r+0xea>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	442b      	add	r3, r5
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	f8d8 3000 	ldr.w	r3, [r8]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	bb62      	cbnz	r2, 80020a8 <_malloc_r+0xdc>
 800204e:	f8c8 7000 	str.w	r7, [r8]
 8002052:	e00f      	b.n	8002074 <_malloc_r+0xa8>
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	1b52      	subs	r2, r2, r5
 8002058:	d420      	bmi.n	800209c <_malloc_r+0xd0>
 800205a:	2a0b      	cmp	r2, #11
 800205c:	d917      	bls.n	800208e <_malloc_r+0xc2>
 800205e:	1961      	adds	r1, r4, r5
 8002060:	42a3      	cmp	r3, r4
 8002062:	6025      	str	r5, [r4, #0]
 8002064:	bf18      	it	ne
 8002066:	6059      	strne	r1, [r3, #4]
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	bf08      	it	eq
 800206c:	f8c8 1000 	streq.w	r1, [r8]
 8002070:	5162      	str	r2, [r4, r5]
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	4630      	mov	r0, r6
 8002076:	f000 f82f 	bl	80020d8 <__malloc_unlock>
 800207a:	f104 000b 	add.w	r0, r4, #11
 800207e:	1d23      	adds	r3, r4, #4
 8002080:	f020 0007 	bic.w	r0, r0, #7
 8002084:	1ac2      	subs	r2, r0, r3
 8002086:	bf1c      	itt	ne
 8002088:	1a1b      	subne	r3, r3, r0
 800208a:	50a3      	strne	r3, [r4, r2]
 800208c:	e7af      	b.n	8001fee <_malloc_r+0x22>
 800208e:	6862      	ldr	r2, [r4, #4]
 8002090:	42a3      	cmp	r3, r4
 8002092:	bf0c      	ite	eq
 8002094:	f8c8 2000 	streq.w	r2, [r8]
 8002098:	605a      	strne	r2, [r3, #4]
 800209a:	e7eb      	b.n	8002074 <_malloc_r+0xa8>
 800209c:	4623      	mov	r3, r4
 800209e:	6864      	ldr	r4, [r4, #4]
 80020a0:	e7ae      	b.n	8002000 <_malloc_r+0x34>
 80020a2:	463c      	mov	r4, r7
 80020a4:	687f      	ldr	r7, [r7, #4]
 80020a6:	e7b6      	b.n	8002016 <_malloc_r+0x4a>
 80020a8:	461a      	mov	r2, r3
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	d1fb      	bne.n	80020a8 <_malloc_r+0xdc>
 80020b0:	2300      	movs	r3, #0
 80020b2:	6053      	str	r3, [r2, #4]
 80020b4:	e7de      	b.n	8002074 <_malloc_r+0xa8>
 80020b6:	230c      	movs	r3, #12
 80020b8:	4630      	mov	r0, r6
 80020ba:	6033      	str	r3, [r6, #0]
 80020bc:	f000 f80c 	bl	80020d8 <__malloc_unlock>
 80020c0:	e794      	b.n	8001fec <_malloc_r+0x20>
 80020c2:	6005      	str	r5, [r0, #0]
 80020c4:	e7d6      	b.n	8002074 <_malloc_r+0xa8>
 80020c6:	bf00      	nop
 80020c8:	200002a8 	.word	0x200002a8

080020cc <__malloc_lock>:
 80020cc:	4801      	ldr	r0, [pc, #4]	@ (80020d4 <__malloc_lock+0x8>)
 80020ce:	f7ff bf11 	b.w	8001ef4 <__retarget_lock_acquire_recursive>
 80020d2:	bf00      	nop
 80020d4:	200002a0 	.word	0x200002a0

080020d8 <__malloc_unlock>:
 80020d8:	4801      	ldr	r0, [pc, #4]	@ (80020e0 <__malloc_unlock+0x8>)
 80020da:	f7ff bf0c 	b.w	8001ef6 <__retarget_lock_release_recursive>
 80020de:	bf00      	nop
 80020e0:	200002a0 	.word	0x200002a0

080020e4 <__ssputs_r>:
 80020e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e8:	461f      	mov	r7, r3
 80020ea:	688e      	ldr	r6, [r1, #8]
 80020ec:	4682      	mov	sl, r0
 80020ee:	42be      	cmp	r6, r7
 80020f0:	460c      	mov	r4, r1
 80020f2:	4690      	mov	r8, r2
 80020f4:	680b      	ldr	r3, [r1, #0]
 80020f6:	d82d      	bhi.n	8002154 <__ssputs_r+0x70>
 80020f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80020fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002100:	d026      	beq.n	8002150 <__ssputs_r+0x6c>
 8002102:	6965      	ldr	r5, [r4, #20]
 8002104:	6909      	ldr	r1, [r1, #16]
 8002106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800210a:	eba3 0901 	sub.w	r9, r3, r1
 800210e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002112:	1c7b      	adds	r3, r7, #1
 8002114:	444b      	add	r3, r9
 8002116:	106d      	asrs	r5, r5, #1
 8002118:	429d      	cmp	r5, r3
 800211a:	bf38      	it	cc
 800211c:	461d      	movcc	r5, r3
 800211e:	0553      	lsls	r3, r2, #21
 8002120:	d527      	bpl.n	8002172 <__ssputs_r+0x8e>
 8002122:	4629      	mov	r1, r5
 8002124:	f7ff ff52 	bl	8001fcc <_malloc_r>
 8002128:	4606      	mov	r6, r0
 800212a:	b360      	cbz	r0, 8002186 <__ssputs_r+0xa2>
 800212c:	464a      	mov	r2, r9
 800212e:	6921      	ldr	r1, [r4, #16]
 8002130:	f000 fafa 	bl	8002728 <memcpy>
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800213a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800213e:	81a3      	strh	r3, [r4, #12]
 8002140:	6126      	str	r6, [r4, #16]
 8002142:	444e      	add	r6, r9
 8002144:	6026      	str	r6, [r4, #0]
 8002146:	463e      	mov	r6, r7
 8002148:	6165      	str	r5, [r4, #20]
 800214a:	eba5 0509 	sub.w	r5, r5, r9
 800214e:	60a5      	str	r5, [r4, #8]
 8002150:	42be      	cmp	r6, r7
 8002152:	d900      	bls.n	8002156 <__ssputs_r+0x72>
 8002154:	463e      	mov	r6, r7
 8002156:	4632      	mov	r2, r6
 8002158:	4641      	mov	r1, r8
 800215a:	6820      	ldr	r0, [r4, #0]
 800215c:	f000 faac 	bl	80026b8 <memmove>
 8002160:	2000      	movs	r0, #0
 8002162:	68a3      	ldr	r3, [r4, #8]
 8002164:	1b9b      	subs	r3, r3, r6
 8002166:	60a3      	str	r3, [r4, #8]
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	4433      	add	r3, r6
 800216c:	6023      	str	r3, [r4, #0]
 800216e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002172:	462a      	mov	r2, r5
 8002174:	f000 fae6 	bl	8002744 <_realloc_r>
 8002178:	4606      	mov	r6, r0
 800217a:	2800      	cmp	r0, #0
 800217c:	d1e0      	bne.n	8002140 <__ssputs_r+0x5c>
 800217e:	4650      	mov	r0, sl
 8002180:	6921      	ldr	r1, [r4, #16]
 8002182:	f7ff feb9 	bl	8001ef8 <_free_r>
 8002186:	230c      	movs	r3, #12
 8002188:	f8ca 3000 	str.w	r3, [sl]
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	f04f 30ff 	mov.w	r0, #4294967295
 8002192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002196:	81a3      	strh	r3, [r4, #12]
 8002198:	e7e9      	b.n	800216e <__ssputs_r+0x8a>
	...

0800219c <_svfiprintf_r>:
 800219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	4698      	mov	r8, r3
 80021a2:	898b      	ldrh	r3, [r1, #12]
 80021a4:	4607      	mov	r7, r0
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	460d      	mov	r5, r1
 80021aa:	4614      	mov	r4, r2
 80021ac:	b09d      	sub	sp, #116	@ 0x74
 80021ae:	d510      	bpl.n	80021d2 <_svfiprintf_r+0x36>
 80021b0:	690b      	ldr	r3, [r1, #16]
 80021b2:	b973      	cbnz	r3, 80021d2 <_svfiprintf_r+0x36>
 80021b4:	2140      	movs	r1, #64	@ 0x40
 80021b6:	f7ff ff09 	bl	8001fcc <_malloc_r>
 80021ba:	6028      	str	r0, [r5, #0]
 80021bc:	6128      	str	r0, [r5, #16]
 80021be:	b930      	cbnz	r0, 80021ce <_svfiprintf_r+0x32>
 80021c0:	230c      	movs	r3, #12
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	b01d      	add	sp, #116	@ 0x74
 80021ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ce:	2340      	movs	r3, #64	@ 0x40
 80021d0:	616b      	str	r3, [r5, #20]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80021d6:	2320      	movs	r3, #32
 80021d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80021dc:	2330      	movs	r3, #48	@ 0x30
 80021de:	f04f 0901 	mov.w	r9, #1
 80021e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80021e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002380 <_svfiprintf_r+0x1e4>
 80021ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80021ee:	4623      	mov	r3, r4
 80021f0:	469a      	mov	sl, r3
 80021f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021f6:	b10a      	cbz	r2, 80021fc <_svfiprintf_r+0x60>
 80021f8:	2a25      	cmp	r2, #37	@ 0x25
 80021fa:	d1f9      	bne.n	80021f0 <_svfiprintf_r+0x54>
 80021fc:	ebba 0b04 	subs.w	fp, sl, r4
 8002200:	d00b      	beq.n	800221a <_svfiprintf_r+0x7e>
 8002202:	465b      	mov	r3, fp
 8002204:	4622      	mov	r2, r4
 8002206:	4629      	mov	r1, r5
 8002208:	4638      	mov	r0, r7
 800220a:	f7ff ff6b 	bl	80020e4 <__ssputs_r>
 800220e:	3001      	adds	r0, #1
 8002210:	f000 80a7 	beq.w	8002362 <_svfiprintf_r+0x1c6>
 8002214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002216:	445a      	add	r2, fp
 8002218:	9209      	str	r2, [sp, #36]	@ 0x24
 800221a:	f89a 3000 	ldrb.w	r3, [sl]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 809f 	beq.w	8002362 <_svfiprintf_r+0x1c6>
 8002224:	2300      	movs	r3, #0
 8002226:	f04f 32ff 	mov.w	r2, #4294967295
 800222a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800222e:	f10a 0a01 	add.w	sl, sl, #1
 8002232:	9304      	str	r3, [sp, #16]
 8002234:	9307      	str	r3, [sp, #28]
 8002236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800223a:	931a      	str	r3, [sp, #104]	@ 0x68
 800223c:	4654      	mov	r4, sl
 800223e:	2205      	movs	r2, #5
 8002240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002244:	484e      	ldr	r0, [pc, #312]	@ (8002380 <_svfiprintf_r+0x1e4>)
 8002246:	f000 fa61 	bl	800270c <memchr>
 800224a:	9a04      	ldr	r2, [sp, #16]
 800224c:	b9d8      	cbnz	r0, 8002286 <_svfiprintf_r+0xea>
 800224e:	06d0      	lsls	r0, r2, #27
 8002250:	bf44      	itt	mi
 8002252:	2320      	movmi	r3, #32
 8002254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002258:	0711      	lsls	r1, r2, #28
 800225a:	bf44      	itt	mi
 800225c:	232b      	movmi	r3, #43	@ 0x2b
 800225e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002262:	f89a 3000 	ldrb.w	r3, [sl]
 8002266:	2b2a      	cmp	r3, #42	@ 0x2a
 8002268:	d015      	beq.n	8002296 <_svfiprintf_r+0xfa>
 800226a:	4654      	mov	r4, sl
 800226c:	2000      	movs	r0, #0
 800226e:	f04f 0c0a 	mov.w	ip, #10
 8002272:	9a07      	ldr	r2, [sp, #28]
 8002274:	4621      	mov	r1, r4
 8002276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800227a:	3b30      	subs	r3, #48	@ 0x30
 800227c:	2b09      	cmp	r3, #9
 800227e:	d94b      	bls.n	8002318 <_svfiprintf_r+0x17c>
 8002280:	b1b0      	cbz	r0, 80022b0 <_svfiprintf_r+0x114>
 8002282:	9207      	str	r2, [sp, #28]
 8002284:	e014      	b.n	80022b0 <_svfiprintf_r+0x114>
 8002286:	eba0 0308 	sub.w	r3, r0, r8
 800228a:	fa09 f303 	lsl.w	r3, r9, r3
 800228e:	4313      	orrs	r3, r2
 8002290:	46a2      	mov	sl, r4
 8002292:	9304      	str	r3, [sp, #16]
 8002294:	e7d2      	b.n	800223c <_svfiprintf_r+0xa0>
 8002296:	9b03      	ldr	r3, [sp, #12]
 8002298:	1d19      	adds	r1, r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	9103      	str	r1, [sp, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bfbb      	ittet	lt
 80022a2:	425b      	neglt	r3, r3
 80022a4:	f042 0202 	orrlt.w	r2, r2, #2
 80022a8:	9307      	strge	r3, [sp, #28]
 80022aa:	9307      	strlt	r3, [sp, #28]
 80022ac:	bfb8      	it	lt
 80022ae:	9204      	strlt	r2, [sp, #16]
 80022b0:	7823      	ldrb	r3, [r4, #0]
 80022b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80022b4:	d10a      	bne.n	80022cc <_svfiprintf_r+0x130>
 80022b6:	7863      	ldrb	r3, [r4, #1]
 80022b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80022ba:	d132      	bne.n	8002322 <_svfiprintf_r+0x186>
 80022bc:	9b03      	ldr	r3, [sp, #12]
 80022be:	3402      	adds	r4, #2
 80022c0:	1d1a      	adds	r2, r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	9203      	str	r2, [sp, #12]
 80022c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022ca:	9305      	str	r3, [sp, #20]
 80022cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002384 <_svfiprintf_r+0x1e8>
 80022d0:	2203      	movs	r2, #3
 80022d2:	4650      	mov	r0, sl
 80022d4:	7821      	ldrb	r1, [r4, #0]
 80022d6:	f000 fa19 	bl	800270c <memchr>
 80022da:	b138      	cbz	r0, 80022ec <_svfiprintf_r+0x150>
 80022dc:	2240      	movs	r2, #64	@ 0x40
 80022de:	9b04      	ldr	r3, [sp, #16]
 80022e0:	eba0 000a 	sub.w	r0, r0, sl
 80022e4:	4082      	lsls	r2, r0
 80022e6:	4313      	orrs	r3, r2
 80022e8:	3401      	adds	r4, #1
 80022ea:	9304      	str	r3, [sp, #16]
 80022ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022f0:	2206      	movs	r2, #6
 80022f2:	4825      	ldr	r0, [pc, #148]	@ (8002388 <_svfiprintf_r+0x1ec>)
 80022f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80022f8:	f000 fa08 	bl	800270c <memchr>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d036      	beq.n	800236e <_svfiprintf_r+0x1d2>
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <_svfiprintf_r+0x1f0>)
 8002302:	bb1b      	cbnz	r3, 800234c <_svfiprintf_r+0x1b0>
 8002304:	9b03      	ldr	r3, [sp, #12]
 8002306:	3307      	adds	r3, #7
 8002308:	f023 0307 	bic.w	r3, r3, #7
 800230c:	3308      	adds	r3, #8
 800230e:	9303      	str	r3, [sp, #12]
 8002310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002312:	4433      	add	r3, r6
 8002314:	9309      	str	r3, [sp, #36]	@ 0x24
 8002316:	e76a      	b.n	80021ee <_svfiprintf_r+0x52>
 8002318:	460c      	mov	r4, r1
 800231a:	2001      	movs	r0, #1
 800231c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002320:	e7a8      	b.n	8002274 <_svfiprintf_r+0xd8>
 8002322:	2300      	movs	r3, #0
 8002324:	f04f 0c0a 	mov.w	ip, #10
 8002328:	4619      	mov	r1, r3
 800232a:	3401      	adds	r4, #1
 800232c:	9305      	str	r3, [sp, #20]
 800232e:	4620      	mov	r0, r4
 8002330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002334:	3a30      	subs	r2, #48	@ 0x30
 8002336:	2a09      	cmp	r2, #9
 8002338:	d903      	bls.n	8002342 <_svfiprintf_r+0x1a6>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0c6      	beq.n	80022cc <_svfiprintf_r+0x130>
 800233e:	9105      	str	r1, [sp, #20]
 8002340:	e7c4      	b.n	80022cc <_svfiprintf_r+0x130>
 8002342:	4604      	mov	r4, r0
 8002344:	2301      	movs	r3, #1
 8002346:	fb0c 2101 	mla	r1, ip, r1, r2
 800234a:	e7f0      	b.n	800232e <_svfiprintf_r+0x192>
 800234c:	ab03      	add	r3, sp, #12
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	462a      	mov	r2, r5
 8002352:	4638      	mov	r0, r7
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <_svfiprintf_r+0x1f4>)
 8002356:	a904      	add	r1, sp, #16
 8002358:	f3af 8000 	nop.w
 800235c:	1c42      	adds	r2, r0, #1
 800235e:	4606      	mov	r6, r0
 8002360:	d1d6      	bne.n	8002310 <_svfiprintf_r+0x174>
 8002362:	89ab      	ldrh	r3, [r5, #12]
 8002364:	065b      	lsls	r3, r3, #25
 8002366:	f53f af2d 	bmi.w	80021c4 <_svfiprintf_r+0x28>
 800236a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800236c:	e72c      	b.n	80021c8 <_svfiprintf_r+0x2c>
 800236e:	ab03      	add	r3, sp, #12
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	462a      	mov	r2, r5
 8002374:	4638      	mov	r0, r7
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <_svfiprintf_r+0x1f4>)
 8002378:	a904      	add	r1, sp, #16
 800237a:	f000 f87d 	bl	8002478 <_printf_i>
 800237e:	e7ed      	b.n	800235c <_svfiprintf_r+0x1c0>
 8002380:	080027fa 	.word	0x080027fa
 8002384:	08002800 	.word	0x08002800
 8002388:	08002804 	.word	0x08002804
 800238c:	00000000 	.word	0x00000000
 8002390:	080020e5 	.word	0x080020e5

08002394 <_printf_common>:
 8002394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002398:	4616      	mov	r6, r2
 800239a:	4698      	mov	r8, r3
 800239c:	688a      	ldr	r2, [r1, #8]
 800239e:	690b      	ldr	r3, [r1, #16]
 80023a0:	4607      	mov	r7, r0
 80023a2:	4293      	cmp	r3, r2
 80023a4:	bfb8      	it	lt
 80023a6:	4613      	movlt	r3, r2
 80023a8:	6033      	str	r3, [r6, #0]
 80023aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023ae:	460c      	mov	r4, r1
 80023b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023b4:	b10a      	cbz	r2, 80023ba <_printf_common+0x26>
 80023b6:	3301      	adds	r3, #1
 80023b8:	6033      	str	r3, [r6, #0]
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	0699      	lsls	r1, r3, #26
 80023be:	bf42      	ittt	mi
 80023c0:	6833      	ldrmi	r3, [r6, #0]
 80023c2:	3302      	addmi	r3, #2
 80023c4:	6033      	strmi	r3, [r6, #0]
 80023c6:	6825      	ldr	r5, [r4, #0]
 80023c8:	f015 0506 	ands.w	r5, r5, #6
 80023cc:	d106      	bne.n	80023dc <_printf_common+0x48>
 80023ce:	f104 0a19 	add.w	sl, r4, #25
 80023d2:	68e3      	ldr	r3, [r4, #12]
 80023d4:	6832      	ldr	r2, [r6, #0]
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	42ab      	cmp	r3, r5
 80023da:	dc2b      	bgt.n	8002434 <_printf_common+0xa0>
 80023dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	3b00      	subs	r3, #0
 80023e4:	bf18      	it	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	0692      	lsls	r2, r2, #26
 80023ea:	d430      	bmi.n	800244e <_printf_common+0xba>
 80023ec:	4641      	mov	r1, r8
 80023ee:	4638      	mov	r0, r7
 80023f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023f4:	47c8      	blx	r9
 80023f6:	3001      	adds	r0, #1
 80023f8:	d023      	beq.n	8002442 <_printf_common+0xae>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	6922      	ldr	r2, [r4, #16]
 80023fe:	f003 0306 	and.w	r3, r3, #6
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf14      	ite	ne
 8002406:	2500      	movne	r5, #0
 8002408:	6833      	ldreq	r3, [r6, #0]
 800240a:	f04f 0600 	mov.w	r6, #0
 800240e:	bf08      	it	eq
 8002410:	68e5      	ldreq	r5, [r4, #12]
 8002412:	f104 041a 	add.w	r4, r4, #26
 8002416:	bf08      	it	eq
 8002418:	1aed      	subeq	r5, r5, r3
 800241a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800241e:	bf08      	it	eq
 8002420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002424:	4293      	cmp	r3, r2
 8002426:	bfc4      	itt	gt
 8002428:	1a9b      	subgt	r3, r3, r2
 800242a:	18ed      	addgt	r5, r5, r3
 800242c:	42b5      	cmp	r5, r6
 800242e:	d11a      	bne.n	8002466 <_printf_common+0xd2>
 8002430:	2000      	movs	r0, #0
 8002432:	e008      	b.n	8002446 <_printf_common+0xb2>
 8002434:	2301      	movs	r3, #1
 8002436:	4652      	mov	r2, sl
 8002438:	4641      	mov	r1, r8
 800243a:	4638      	mov	r0, r7
 800243c:	47c8      	blx	r9
 800243e:	3001      	adds	r0, #1
 8002440:	d103      	bne.n	800244a <_printf_common+0xb6>
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
 8002446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800244a:	3501      	adds	r5, #1
 800244c:	e7c1      	b.n	80023d2 <_printf_common+0x3e>
 800244e:	2030      	movs	r0, #48	@ 0x30
 8002450:	18e1      	adds	r1, r4, r3
 8002452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800245c:	4422      	add	r2, r4
 800245e:	3302      	adds	r3, #2
 8002460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002464:	e7c2      	b.n	80023ec <_printf_common+0x58>
 8002466:	2301      	movs	r3, #1
 8002468:	4622      	mov	r2, r4
 800246a:	4641      	mov	r1, r8
 800246c:	4638      	mov	r0, r7
 800246e:	47c8      	blx	r9
 8002470:	3001      	adds	r0, #1
 8002472:	d0e6      	beq.n	8002442 <_printf_common+0xae>
 8002474:	3601      	adds	r6, #1
 8002476:	e7d9      	b.n	800242c <_printf_common+0x98>

08002478 <_printf_i>:
 8002478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800247c:	7e0f      	ldrb	r7, [r1, #24]
 800247e:	4691      	mov	r9, r2
 8002480:	2f78      	cmp	r7, #120	@ 0x78
 8002482:	4680      	mov	r8, r0
 8002484:	460c      	mov	r4, r1
 8002486:	469a      	mov	sl, r3
 8002488:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800248a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800248e:	d807      	bhi.n	80024a0 <_printf_i+0x28>
 8002490:	2f62      	cmp	r7, #98	@ 0x62
 8002492:	d80a      	bhi.n	80024aa <_printf_i+0x32>
 8002494:	2f00      	cmp	r7, #0
 8002496:	f000 80d3 	beq.w	8002640 <_printf_i+0x1c8>
 800249a:	2f58      	cmp	r7, #88	@ 0x58
 800249c:	f000 80ba 	beq.w	8002614 <_printf_i+0x19c>
 80024a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024a8:	e03a      	b.n	8002520 <_printf_i+0xa8>
 80024aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024ae:	2b15      	cmp	r3, #21
 80024b0:	d8f6      	bhi.n	80024a0 <_printf_i+0x28>
 80024b2:	a101      	add	r1, pc, #4	@ (adr r1, 80024b8 <_printf_i+0x40>)
 80024b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024b8:	08002511 	.word	0x08002511
 80024bc:	08002525 	.word	0x08002525
 80024c0:	080024a1 	.word	0x080024a1
 80024c4:	080024a1 	.word	0x080024a1
 80024c8:	080024a1 	.word	0x080024a1
 80024cc:	080024a1 	.word	0x080024a1
 80024d0:	08002525 	.word	0x08002525
 80024d4:	080024a1 	.word	0x080024a1
 80024d8:	080024a1 	.word	0x080024a1
 80024dc:	080024a1 	.word	0x080024a1
 80024e0:	080024a1 	.word	0x080024a1
 80024e4:	08002627 	.word	0x08002627
 80024e8:	0800254f 	.word	0x0800254f
 80024ec:	080025e1 	.word	0x080025e1
 80024f0:	080024a1 	.word	0x080024a1
 80024f4:	080024a1 	.word	0x080024a1
 80024f8:	08002649 	.word	0x08002649
 80024fc:	080024a1 	.word	0x080024a1
 8002500:	0800254f 	.word	0x0800254f
 8002504:	080024a1 	.word	0x080024a1
 8002508:	080024a1 	.word	0x080024a1
 800250c:	080025e9 	.word	0x080025e9
 8002510:	6833      	ldr	r3, [r6, #0]
 8002512:	1d1a      	adds	r2, r3, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6032      	str	r2, [r6, #0]
 8002518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800251c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002520:	2301      	movs	r3, #1
 8002522:	e09e      	b.n	8002662 <_printf_i+0x1ea>
 8002524:	6833      	ldr	r3, [r6, #0]
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	1d19      	adds	r1, r3, #4
 800252a:	6031      	str	r1, [r6, #0]
 800252c:	0606      	lsls	r6, r0, #24
 800252e:	d501      	bpl.n	8002534 <_printf_i+0xbc>
 8002530:	681d      	ldr	r5, [r3, #0]
 8002532:	e003      	b.n	800253c <_printf_i+0xc4>
 8002534:	0645      	lsls	r5, r0, #25
 8002536:	d5fb      	bpl.n	8002530 <_printf_i+0xb8>
 8002538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800253c:	2d00      	cmp	r5, #0
 800253e:	da03      	bge.n	8002548 <_printf_i+0xd0>
 8002540:	232d      	movs	r3, #45	@ 0x2d
 8002542:	426d      	negs	r5, r5
 8002544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002548:	230a      	movs	r3, #10
 800254a:	4859      	ldr	r0, [pc, #356]	@ (80026b0 <_printf_i+0x238>)
 800254c:	e011      	b.n	8002572 <_printf_i+0xfa>
 800254e:	6821      	ldr	r1, [r4, #0]
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	0608      	lsls	r0, r1, #24
 8002554:	f853 5b04 	ldr.w	r5, [r3], #4
 8002558:	d402      	bmi.n	8002560 <_printf_i+0xe8>
 800255a:	0649      	lsls	r1, r1, #25
 800255c:	bf48      	it	mi
 800255e:	b2ad      	uxthmi	r5, r5
 8002560:	2f6f      	cmp	r7, #111	@ 0x6f
 8002562:	6033      	str	r3, [r6, #0]
 8002564:	bf14      	ite	ne
 8002566:	230a      	movne	r3, #10
 8002568:	2308      	moveq	r3, #8
 800256a:	4851      	ldr	r0, [pc, #324]	@ (80026b0 <_printf_i+0x238>)
 800256c:	2100      	movs	r1, #0
 800256e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002572:	6866      	ldr	r6, [r4, #4]
 8002574:	2e00      	cmp	r6, #0
 8002576:	bfa8      	it	ge
 8002578:	6821      	ldrge	r1, [r4, #0]
 800257a:	60a6      	str	r6, [r4, #8]
 800257c:	bfa4      	itt	ge
 800257e:	f021 0104 	bicge.w	r1, r1, #4
 8002582:	6021      	strge	r1, [r4, #0]
 8002584:	b90d      	cbnz	r5, 800258a <_printf_i+0x112>
 8002586:	2e00      	cmp	r6, #0
 8002588:	d04b      	beq.n	8002622 <_printf_i+0x1aa>
 800258a:	4616      	mov	r6, r2
 800258c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002590:	fb03 5711 	mls	r7, r3, r1, r5
 8002594:	5dc7      	ldrb	r7, [r0, r7]
 8002596:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800259a:	462f      	mov	r7, r5
 800259c:	42bb      	cmp	r3, r7
 800259e:	460d      	mov	r5, r1
 80025a0:	d9f4      	bls.n	800258c <_printf_i+0x114>
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d10b      	bne.n	80025be <_printf_i+0x146>
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	07df      	lsls	r7, r3, #31
 80025aa:	d508      	bpl.n	80025be <_printf_i+0x146>
 80025ac:	6923      	ldr	r3, [r4, #16]
 80025ae:	6861      	ldr	r1, [r4, #4]
 80025b0:	4299      	cmp	r1, r3
 80025b2:	bfde      	ittt	le
 80025b4:	2330      	movle	r3, #48	@ 0x30
 80025b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025be:	1b92      	subs	r2, r2, r6
 80025c0:	6122      	str	r2, [r4, #16]
 80025c2:	464b      	mov	r3, r9
 80025c4:	4621      	mov	r1, r4
 80025c6:	4640      	mov	r0, r8
 80025c8:	f8cd a000 	str.w	sl, [sp]
 80025cc:	aa03      	add	r2, sp, #12
 80025ce:	f7ff fee1 	bl	8002394 <_printf_common>
 80025d2:	3001      	adds	r0, #1
 80025d4:	d14a      	bne.n	800266c <_printf_i+0x1f4>
 80025d6:	f04f 30ff 	mov.w	r0, #4294967295
 80025da:	b004      	add	sp, #16
 80025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f043 0320 	orr.w	r3, r3, #32
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	2778      	movs	r7, #120	@ 0x78
 80025ea:	4832      	ldr	r0, [pc, #200]	@ (80026b4 <_printf_i+0x23c>)
 80025ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	6831      	ldr	r1, [r6, #0]
 80025f4:	061f      	lsls	r7, r3, #24
 80025f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80025fa:	d402      	bmi.n	8002602 <_printf_i+0x18a>
 80025fc:	065f      	lsls	r7, r3, #25
 80025fe:	bf48      	it	mi
 8002600:	b2ad      	uxthmi	r5, r5
 8002602:	6031      	str	r1, [r6, #0]
 8002604:	07d9      	lsls	r1, r3, #31
 8002606:	bf44      	itt	mi
 8002608:	f043 0320 	orrmi.w	r3, r3, #32
 800260c:	6023      	strmi	r3, [r4, #0]
 800260e:	b11d      	cbz	r5, 8002618 <_printf_i+0x1a0>
 8002610:	2310      	movs	r3, #16
 8002612:	e7ab      	b.n	800256c <_printf_i+0xf4>
 8002614:	4826      	ldr	r0, [pc, #152]	@ (80026b0 <_printf_i+0x238>)
 8002616:	e7e9      	b.n	80025ec <_printf_i+0x174>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	f023 0320 	bic.w	r3, r3, #32
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	e7f6      	b.n	8002610 <_printf_i+0x198>
 8002622:	4616      	mov	r6, r2
 8002624:	e7bd      	b.n	80025a2 <_printf_i+0x12a>
 8002626:	6833      	ldr	r3, [r6, #0]
 8002628:	6825      	ldr	r5, [r4, #0]
 800262a:	1d18      	adds	r0, r3, #4
 800262c:	6961      	ldr	r1, [r4, #20]
 800262e:	6030      	str	r0, [r6, #0]
 8002630:	062e      	lsls	r6, r5, #24
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	d501      	bpl.n	800263a <_printf_i+0x1c2>
 8002636:	6019      	str	r1, [r3, #0]
 8002638:	e002      	b.n	8002640 <_printf_i+0x1c8>
 800263a:	0668      	lsls	r0, r5, #25
 800263c:	d5fb      	bpl.n	8002636 <_printf_i+0x1be>
 800263e:	8019      	strh	r1, [r3, #0]
 8002640:	2300      	movs	r3, #0
 8002642:	4616      	mov	r6, r2
 8002644:	6123      	str	r3, [r4, #16]
 8002646:	e7bc      	b.n	80025c2 <_printf_i+0x14a>
 8002648:	6833      	ldr	r3, [r6, #0]
 800264a:	2100      	movs	r1, #0
 800264c:	1d1a      	adds	r2, r3, #4
 800264e:	6032      	str	r2, [r6, #0]
 8002650:	681e      	ldr	r6, [r3, #0]
 8002652:	6862      	ldr	r2, [r4, #4]
 8002654:	4630      	mov	r0, r6
 8002656:	f000 f859 	bl	800270c <memchr>
 800265a:	b108      	cbz	r0, 8002660 <_printf_i+0x1e8>
 800265c:	1b80      	subs	r0, r0, r6
 800265e:	6060      	str	r0, [r4, #4]
 8002660:	6863      	ldr	r3, [r4, #4]
 8002662:	6123      	str	r3, [r4, #16]
 8002664:	2300      	movs	r3, #0
 8002666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800266a:	e7aa      	b.n	80025c2 <_printf_i+0x14a>
 800266c:	4632      	mov	r2, r6
 800266e:	4649      	mov	r1, r9
 8002670:	4640      	mov	r0, r8
 8002672:	6923      	ldr	r3, [r4, #16]
 8002674:	47d0      	blx	sl
 8002676:	3001      	adds	r0, #1
 8002678:	d0ad      	beq.n	80025d6 <_printf_i+0x15e>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	079b      	lsls	r3, r3, #30
 800267e:	d413      	bmi.n	80026a8 <_printf_i+0x230>
 8002680:	68e0      	ldr	r0, [r4, #12]
 8002682:	9b03      	ldr	r3, [sp, #12]
 8002684:	4298      	cmp	r0, r3
 8002686:	bfb8      	it	lt
 8002688:	4618      	movlt	r0, r3
 800268a:	e7a6      	b.n	80025da <_printf_i+0x162>
 800268c:	2301      	movs	r3, #1
 800268e:	4632      	mov	r2, r6
 8002690:	4649      	mov	r1, r9
 8002692:	4640      	mov	r0, r8
 8002694:	47d0      	blx	sl
 8002696:	3001      	adds	r0, #1
 8002698:	d09d      	beq.n	80025d6 <_printf_i+0x15e>
 800269a:	3501      	adds	r5, #1
 800269c:	68e3      	ldr	r3, [r4, #12]
 800269e:	9903      	ldr	r1, [sp, #12]
 80026a0:	1a5b      	subs	r3, r3, r1
 80026a2:	42ab      	cmp	r3, r5
 80026a4:	dcf2      	bgt.n	800268c <_printf_i+0x214>
 80026a6:	e7eb      	b.n	8002680 <_printf_i+0x208>
 80026a8:	2500      	movs	r5, #0
 80026aa:	f104 0619 	add.w	r6, r4, #25
 80026ae:	e7f5      	b.n	800269c <_printf_i+0x224>
 80026b0:	0800280b 	.word	0x0800280b
 80026b4:	0800281c 	.word	0x0800281c

080026b8 <memmove>:
 80026b8:	4288      	cmp	r0, r1
 80026ba:	b510      	push	{r4, lr}
 80026bc:	eb01 0402 	add.w	r4, r1, r2
 80026c0:	d902      	bls.n	80026c8 <memmove+0x10>
 80026c2:	4284      	cmp	r4, r0
 80026c4:	4623      	mov	r3, r4
 80026c6:	d807      	bhi.n	80026d8 <memmove+0x20>
 80026c8:	1e43      	subs	r3, r0, #1
 80026ca:	42a1      	cmp	r1, r4
 80026cc:	d008      	beq.n	80026e0 <memmove+0x28>
 80026ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026d6:	e7f8      	b.n	80026ca <memmove+0x12>
 80026d8:	4601      	mov	r1, r0
 80026da:	4402      	add	r2, r0
 80026dc:	428a      	cmp	r2, r1
 80026de:	d100      	bne.n	80026e2 <memmove+0x2a>
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026ea:	e7f7      	b.n	80026dc <memmove+0x24>

080026ec <_sbrk_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	2300      	movs	r3, #0
 80026f0:	4d05      	ldr	r5, [pc, #20]	@ (8002708 <_sbrk_r+0x1c>)
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	f7fd ff3a 	bl	8000570 <_sbrk>
 80026fc:	1c43      	adds	r3, r0, #1
 80026fe:	d102      	bne.n	8002706 <_sbrk_r+0x1a>
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	b103      	cbz	r3, 8002706 <_sbrk_r+0x1a>
 8002704:	6023      	str	r3, [r4, #0]
 8002706:	bd38      	pop	{r3, r4, r5, pc}
 8002708:	2000029c 	.word	0x2000029c

0800270c <memchr>:
 800270c:	4603      	mov	r3, r0
 800270e:	b510      	push	{r4, lr}
 8002710:	b2c9      	uxtb	r1, r1
 8002712:	4402      	add	r2, r0
 8002714:	4293      	cmp	r3, r2
 8002716:	4618      	mov	r0, r3
 8002718:	d101      	bne.n	800271e <memchr+0x12>
 800271a:	2000      	movs	r0, #0
 800271c:	e003      	b.n	8002726 <memchr+0x1a>
 800271e:	7804      	ldrb	r4, [r0, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	428c      	cmp	r4, r1
 8002724:	d1f6      	bne.n	8002714 <memchr+0x8>
 8002726:	bd10      	pop	{r4, pc}

08002728 <memcpy>:
 8002728:	440a      	add	r2, r1
 800272a:	4291      	cmp	r1, r2
 800272c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002730:	d100      	bne.n	8002734 <memcpy+0xc>
 8002732:	4770      	bx	lr
 8002734:	b510      	push	{r4, lr}
 8002736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800273a:	4291      	cmp	r1, r2
 800273c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002740:	d1f9      	bne.n	8002736 <memcpy+0xe>
 8002742:	bd10      	pop	{r4, pc}

08002744 <_realloc_r>:
 8002744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002748:	4680      	mov	r8, r0
 800274a:	4615      	mov	r5, r2
 800274c:	460c      	mov	r4, r1
 800274e:	b921      	cbnz	r1, 800275a <_realloc_r+0x16>
 8002750:	4611      	mov	r1, r2
 8002752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002756:	f7ff bc39 	b.w	8001fcc <_malloc_r>
 800275a:	b92a      	cbnz	r2, 8002768 <_realloc_r+0x24>
 800275c:	f7ff fbcc 	bl	8001ef8 <_free_r>
 8002760:	2400      	movs	r4, #0
 8002762:	4620      	mov	r0, r4
 8002764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002768:	f000 f81a 	bl	80027a0 <_malloc_usable_size_r>
 800276c:	4285      	cmp	r5, r0
 800276e:	4606      	mov	r6, r0
 8002770:	d802      	bhi.n	8002778 <_realloc_r+0x34>
 8002772:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002776:	d8f4      	bhi.n	8002762 <_realloc_r+0x1e>
 8002778:	4629      	mov	r1, r5
 800277a:	4640      	mov	r0, r8
 800277c:	f7ff fc26 	bl	8001fcc <_malloc_r>
 8002780:	4607      	mov	r7, r0
 8002782:	2800      	cmp	r0, #0
 8002784:	d0ec      	beq.n	8002760 <_realloc_r+0x1c>
 8002786:	42b5      	cmp	r5, r6
 8002788:	462a      	mov	r2, r5
 800278a:	4621      	mov	r1, r4
 800278c:	bf28      	it	cs
 800278e:	4632      	movcs	r2, r6
 8002790:	f7ff ffca 	bl	8002728 <memcpy>
 8002794:	4621      	mov	r1, r4
 8002796:	4640      	mov	r0, r8
 8002798:	f7ff fbae 	bl	8001ef8 <_free_r>
 800279c:	463c      	mov	r4, r7
 800279e:	e7e0      	b.n	8002762 <_realloc_r+0x1e>

080027a0 <_malloc_usable_size_r>:
 80027a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027a4:	1f18      	subs	r0, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bfbc      	itt	lt
 80027aa:	580b      	ldrlt	r3, [r1, r0]
 80027ac:	18c0      	addlt	r0, r0, r3
 80027ae:	4770      	bx	lr

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
