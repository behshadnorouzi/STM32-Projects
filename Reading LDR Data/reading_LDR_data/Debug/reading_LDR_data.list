
reading_LDR_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d80  08002d80  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d80  08002d80  00003d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d88  08002d88  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d8c  08002d8c  00003d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002d90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  08002dec  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08002dec  00004278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079f6  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e7  00000000  00000000  0000ba7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000d168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000589  00000000  00000000  0000d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b15  00000000  00000000  0000de39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009446  00000000  00000000  0002494e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852e0  00000000  00000000  0002dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000b30b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce0 	.word	0x08002ce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002ce0 	.word	0x08002ce0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fa54 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f836 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8ec 	bl	8000344 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016c:	f000 f882 	bl	8000274 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f8be 	bl	80002f0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_ADC_Start(&hadc1);
 8000174:	4812      	ldr	r0, [pc, #72]	@ (80001c0 <main+0x64>)
 8000176:	f000 fba7 	bl	80008c8 <HAL_ADC_Start>
      // Wait for conversion to complete
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800017a:	f04f 31ff 	mov.w	r1, #4294967295
 800017e:	4810      	ldr	r0, [pc, #64]	@ (80001c0 <main+0x64>)
 8000180:	f000 fc50 	bl	8000a24 <HAL_ADC_PollForConversion>
      // Read ADC value
      adcValue = HAL_ADC_GetValue(&hadc1);
 8000184:	480e      	ldr	r0, [pc, #56]	@ (80001c0 <main+0x64>)
 8000186:	f000 fd53 	bl	8000c30 <HAL_ADC_GetValue>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0d      	ldr	r2, [pc, #52]	@ (80001c4 <main+0x68>)
 800018e:	6013      	str	r3, [r2, #0]
      // Send ADC value to Serial Monitor
      sprintf(buffer, "LDR Value: %lu\r\n", adcValue);
 8000190:	4b0c      	ldr	r3, [pc, #48]	@ (80001c4 <main+0x68>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	461a      	mov	r2, r3
 8000196:	490c      	ldr	r1, [pc, #48]	@ (80001c8 <main+0x6c>)
 8000198:	480c      	ldr	r0, [pc, #48]	@ (80001cc <main+0x70>)
 800019a:	f002 f8f1 	bl	8002380 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800019e:	480b      	ldr	r0, [pc, #44]	@ (80001cc <main+0x70>)
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f04f 33ff 	mov.w	r3, #4294967295
 80001ac:	4907      	ldr	r1, [pc, #28]	@ (80001cc <main+0x70>)
 80001ae:	4808      	ldr	r0, [pc, #32]	@ (80001d0 <main+0x74>)
 80001b0:	f001 ff12 	bl	8001fd8 <HAL_UART_Transmit>
      HAL_Delay(100); // Delay for readability
 80001b4:	2064      	movs	r0, #100	@ 0x64
 80001b6:	f000 fa8b 	bl	80006d0 <HAL_Delay>
  {
 80001ba:	bf00      	nop
 80001bc:	e7da      	b.n	8000174 <main+0x18>
 80001be:	bf00      	nop
 80001c0:	20000078 	.word	0x20000078
 80001c4:	200000f0 	.word	0x200000f0
 80001c8:	08002cf8 	.word	0x08002cf8
 80001cc:	200000f4 	.word	0x200000f4
 80001d0:	200000a8 	.word	0x200000a8

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	@ 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001de:	2228      	movs	r2, #40	@ 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 f8ec 	bl	80023c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2302      	movs	r3, #2
 8000206:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020c:	2310      	movs	r3, #16
 800020e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000218:	4618      	mov	r0, r3
 800021a:	f001 f911 	bl	8001440 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000224:	f000 f8a4 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022c:	2300      	movs	r3, #0
 800022e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fb7e 	bl	8001944 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800024e:	f000 f88f 	bl	8000370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000252:	2302      	movs	r3, #2
 8000254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fcff 	bl	8001c60 <HAL_RCCEx_PeriphCLKConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000268:	f000 f882 	bl	8000370 <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3750      	adds	r7, #80	@ 0x50
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <MX_ADC1_Init+0x74>)
 8000286:	4a19      	ldr	r2, [pc, #100]	@ (80002ec <MX_ADC1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_ADC1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_ADC1_Init+0x74>)
 800029e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 fa31 	bl	8000718 <HAL_ADC_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f858 	bl	8000370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fcb9 	bl	8000c48 <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f848 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000078 	.word	0x20000078
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	@ (8000340 <MX_USART1_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_USART1_UART_Init+0x4c>)
 8000328:	f001 fe06 	bl	8001f38 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f81d 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000a8 	.word	0x200000a8
 8000340:	40013800 	.word	0x40013800

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <MX_GPIO_Init+0x28>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a07      	ldr	r2, [pc, #28]	@ (800036c <MX_GPIO_Init+0x28>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b05      	ldr	r3, [pc, #20]	@ (800036c <MX_GPIO_Init+0x28>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <Error_Handler+0x8>

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a14      	ldr	r2, [pc, #80]	@ (80003d8 <HAL_MspInit+0x5c>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <HAL_MspInit+0x5c>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b2:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <HAL_MspInit+0x60>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <HAL_MspInit+0x60>)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010000 	.word	0x40010000

080003e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a14      	ldr	r2, [pc, #80]	@ (800044c <HAL_ADC_MspInit+0x6c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d121      	bne.n	8000444 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <HAL_ADC_MspInit+0x70>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <HAL_ADC_MspInit+0x70>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <HAL_ADC_MspInit+0x70>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b0d      	ldr	r3, [pc, #52]	@ (8000450 <HAL_ADC_MspInit+0x70>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a0c      	ldr	r2, [pc, #48]	@ (8000450 <HAL_ADC_MspInit+0x70>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <HAL_ADC_MspInit+0x70>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000430:	2301      	movs	r3, #1
 8000432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000434:	2303      	movs	r3, #3
 8000436:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	4805      	ldr	r0, [pc, #20]	@ (8000454 <HAL_ADC_MspInit+0x74>)
 8000440:	f000 fe7a 	bl	8001138 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000444:	bf00      	nop
 8000446:	3720      	adds	r7, #32
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40012400 	.word	0x40012400
 8000450:	40021000 	.word	0x40021000
 8000454:	40010800 	.word	0x40010800

08000458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a1c      	ldr	r2, [pc, #112]	@ (80004e4 <HAL_UART_MspInit+0x8c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d131      	bne.n	80004dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <HAL_UART_MspInit+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a1a      	ldr	r2, [pc, #104]	@ (80004e8 <HAL_UART_MspInit+0x90>)
 800047e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <HAL_UART_MspInit+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <HAL_UART_MspInit+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a14      	ldr	r2, [pc, #80]	@ (80004e8 <HAL_UART_MspInit+0x90>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <HAL_UART_MspInit+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b2:	2303      	movs	r3, #3
 80004b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	480b      	ldr	r0, [pc, #44]	@ (80004ec <HAL_UART_MspInit+0x94>)
 80004be:	f000 fe3b 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <HAL_UART_MspInit+0x94>)
 80004d8:	f000 fe2e 	bl	8001138 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40013800 	.word	0x40013800
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <NMI_Handler+0x4>

080004f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <MemManage_Handler+0x4>

08000508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <UsageFault_Handler+0x4>

08000518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000540:	f000 f8aa 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000550:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <_sbrk+0x5c>)
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <_sbrk+0x60>)
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <_sbrk+0x64>)
 8000566:	4a12      	ldr	r2, [pc, #72]	@ (80005b0 <_sbrk+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	429a      	cmp	r2, r3
 8000576:	d207      	bcs.n	8000588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000578:	f001 ff2a 	bl	80023d0 <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	220c      	movs	r2, #12
 8000580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e009      	b.n	800059c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058e:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <_sbrk+0x64>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <_sbrk+0x64>)
 8000598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20005000 	.word	0x20005000
 80005a8:	00000400 	.word	0x00000400
 80005ac:	20000128 	.word	0x20000128
 80005b0:	20000278 	.word	0x20000278

080005b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f7ff fff8 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005c6:	490c      	ldr	r1, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c8:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a09      	ldr	r2, [pc, #36]	@ (8000600 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005dc:	4c09      	ldr	r4, [pc, #36]	@ (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ea:	f001 fef7 	bl	80023dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fdb5 	bl	800015c <main>
  bx lr
 80005f2:	4770      	bx	lr
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005fc:	08002d90 	.word	0x08002d90
  ldr r2, =_sbss
 8000600:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000604:	20000278 	.word	0x20000278

08000608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC1_2_IRQHandler>
	...

0800060c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <HAL_Init+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <HAL_Init+0x28>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061c:	2003      	movs	r0, #3
 800061e:	f000 fd57 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000622:	200f      	movs	r0, #15
 8000624:	f000 f808 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000628:	f7ff fea8 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_InitTick+0x54>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_InitTick+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd61 	bl	800111e <HAL_SYSTICK_Config>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e00e      	b.n	8000684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d80a      	bhi.n	8000682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f000 fd37 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <HAL_InitTick+0x5c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000
 8000690:	20000008 	.word	0x20000008
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HAL_IncTick+0x1c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <HAL_IncTick+0x20>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a03      	ldr	r2, [pc, #12]	@ (80006b8 <HAL_IncTick+0x20>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000008 	.word	0x20000008
 80006b8:	2000012c 	.word	0x2000012c

080006bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b02      	ldr	r3, [pc, #8]	@ (80006cc <HAL_GetTick+0x10>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	2000012c 	.word	0x2000012c

080006d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d8:	f7ff fff0 	bl	80006bc <HAL_GetTick>
 80006dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e8:	d005      	beq.n	80006f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <HAL_Delay+0x44>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f6:	bf00      	nop
 80006f8:	f7ff ffe0 	bl	80006bc <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f7      	bhi.n	80006f8 <HAL_Delay+0x28>
  {
  }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008

08000718 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000720:	2300      	movs	r3, #0
 8000722:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e0be      	b.n	80008b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000744:	2b00      	cmp	r3, #0
 8000746:	d109      	bne.n	800075c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe42 	bl	80003e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 fbc5 	bl	8000eec <ADC_ConversionStop_Disable>
 8000762:	4603      	mov	r3, r0
 8000764:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	2b00      	cmp	r3, #0
 8000770:	f040 8099 	bne.w	80008a6 <HAL_ADC_Init+0x18e>
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f040 8095 	bne.w	80008a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000780:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000784:	f023 0302 	bic.w	r3, r3, #2
 8000788:	f043 0202 	orr.w	r2, r3, #2
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000798:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7b1b      	ldrb	r3, [r3, #12]
 800079e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007b0:	d003      	beq.n	80007ba <HAL_ADC_Init+0xa2>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d102      	bne.n	80007c0 <HAL_ADC_Init+0xa8>
 80007ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007be:	e000      	b.n	80007c2 <HAL_ADC_Init+0xaa>
 80007c0:	2300      	movs	r3, #0
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7d1b      	ldrb	r3, [r3, #20]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d119      	bne.n	8000804 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7b1b      	ldrb	r3, [r3, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d109      	bne.n	80007ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	3b01      	subs	r3, #1
 80007de:	035a      	lsls	r2, r3, #13
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	e00b      	b.n	8000804 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007f0:	f043 0220 	orr.w	r2, r3, #32
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fc:	f043 0201 	orr.w	r2, r3, #1
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	430a      	orrs	r2, r1
 8000816:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	689a      	ldr	r2, [r3, #8]
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <HAL_ADC_Init+0x1a8>)
 8000820:	4013      	ands	r3, r2
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	430b      	orrs	r3, r1
 800082a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000834:	d003      	beq.n	800083e <HAL_ADC_Init+0x126>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d104      	bne.n	8000848 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	3b01      	subs	r3, #1
 8000844:	051b      	lsls	r3, r3, #20
 8000846:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800084e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	430a      	orrs	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <HAL_ADC_Init+0x1ac>)
 8000864:	4013      	ands	r3, r2
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	429a      	cmp	r2, r3
 800086a:	d10b      	bne.n	8000884 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000876:	f023 0303 	bic.w	r3, r3, #3
 800087a:	f043 0201 	orr.w	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000882:	e018      	b.n	80008b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000888:	f023 0312 	bic.w	r3, r3, #18
 800088c:	f043 0210 	orr.w	r2, r3, #16
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000898:	f043 0201 	orr.w	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a4:	e007      	b.n	80008b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008aa:	f043 0210 	orr.w	r2, r3, #16
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	ffe1f7fd 	.word	0xffe1f7fd
 80008c4:	ff1f0efe 	.word	0xff1f0efe

080008c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d101      	bne.n	80008e2 <HAL_ADC_Start+0x1a>
 80008de:	2302      	movs	r3, #2
 80008e0:	e098      	b.n	8000a14 <HAL_ADC_Start+0x14c>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 faa4 	bl	8000e38 <ADC_Enable>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8087 	bne.w	8000a0a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a41      	ldr	r2, [pc, #260]	@ (8000a1c <HAL_ADC_Start+0x154>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d105      	bne.n	8000926 <HAL_ADC_Start+0x5e>
 800091a:	4b41      	ldr	r3, [pc, #260]	@ (8000a20 <HAL_ADC_Start+0x158>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d115      	bne.n	8000952 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800093c:	2b00      	cmp	r3, #0
 800093e:	d026      	beq.n	800098e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000944:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000948:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000950:	e01d      	b.n	800098e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <HAL_ADC_Start+0x158>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d004      	beq.n	8000972 <HAL_ADC_Start+0xaa>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <HAL_ADC_Start+0x154>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10d      	bne.n	800098e <HAL_ADC_Start+0xc6>
 8000972:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <HAL_ADC_Start+0x158>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800097a:	2b00      	cmp	r3, #0
 800097c:	d007      	beq.n	800098e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000982:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000986:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099e:	f023 0206 	bic.w	r2, r3, #6
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009a6:	e002      	b.n	80009ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f06f 0202 	mvn.w	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80009ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80009ce:	d113      	bne.n	80009f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009d4:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_ADC_Start+0x154>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d105      	bne.n	80009e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_ADC_Start+0x158>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d108      	bne.n	80009f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	e00c      	b.n	8000a12 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	e003      	b.n	8000a12 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40012800 	.word	0x40012800
 8000a20:	40012400 	.word	0x40012400

08000a24 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a3a:	f7ff fe3f 	bl	80006bc <HAL_GetTick>
 8000a3e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00b      	beq.n	8000a66 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a52:	f043 0220 	orr.w	r2, r3, #32
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0d3      	b.n	8000c0e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d131      	bne.n	8000ad8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d12a      	bne.n	8000ad8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a82:	e021      	b.n	8000ac8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8a:	d01d      	beq.n	8000ac8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <HAL_ADC_PollForConversion+0x7e>
 8000a92:	f7ff fe13 	bl	80006bc <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d212      	bcs.n	8000ac8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10b      	bne.n	8000ac8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab4:	f043 0204 	orr.w	r2, r3, #4
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e0a2      	b.n	8000c0e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0d6      	beq.n	8000a84 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ad6:	e070      	b.n	8000bba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8000c18 <HAL_ADC_PollForConversion+0x1f4>)
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	2002      	movs	r0, #2
 8000ade:	f001 f975 	bl	8001dcc <HAL_RCCEx_GetPeriphCLKFreq>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6919      	ldr	r1, [r3, #16]
 8000aee:	4b4b      	ldr	r3, [pc, #300]	@ (8000c1c <HAL_ADC_PollForConversion+0x1f8>)
 8000af0:	400b      	ands	r3, r1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d118      	bne.n	8000b28 <HAL_ADC_PollForConversion+0x104>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68d9      	ldr	r1, [r3, #12]
 8000afc:	4b48      	ldr	r3, [pc, #288]	@ (8000c20 <HAL_ADC_PollForConversion+0x1fc>)
 8000afe:	400b      	ands	r3, r1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d111      	bne.n	8000b28 <HAL_ADC_PollForConversion+0x104>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6919      	ldr	r1, [r3, #16]
 8000b0a:	4b46      	ldr	r3, [pc, #280]	@ (8000c24 <HAL_ADC_PollForConversion+0x200>)
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d108      	bne.n	8000b24 <HAL_ADC_PollForConversion+0x100>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68d9      	ldr	r1, [r3, #12]
 8000b18:	4b43      	ldr	r3, [pc, #268]	@ (8000c28 <HAL_ADC_PollForConversion+0x204>)
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_PollForConversion+0x100>
 8000b20:	2314      	movs	r3, #20
 8000b22:	e020      	b.n	8000b66 <HAL_ADC_PollForConversion+0x142>
 8000b24:	2329      	movs	r3, #41	@ 0x29
 8000b26:	e01e      	b.n	8000b66 <HAL_ADC_PollForConversion+0x142>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6919      	ldr	r1, [r3, #16]
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <HAL_ADC_PollForConversion+0x200>)
 8000b30:	400b      	ands	r3, r1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d106      	bne.n	8000b44 <HAL_ADC_PollForConversion+0x120>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68d9      	ldr	r1, [r3, #12]
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c28 <HAL_ADC_PollForConversion+0x204>)
 8000b3e:	400b      	ands	r3, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00d      	beq.n	8000b60 <HAL_ADC_PollForConversion+0x13c>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6919      	ldr	r1, [r3, #16]
 8000b4a:	4b38      	ldr	r3, [pc, #224]	@ (8000c2c <HAL_ADC_PollForConversion+0x208>)
 8000b4c:	400b      	ands	r3, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d108      	bne.n	8000b64 <HAL_ADC_PollForConversion+0x140>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68d9      	ldr	r1, [r3, #12]
 8000b58:	4b34      	ldr	r3, [pc, #208]	@ (8000c2c <HAL_ADC_PollForConversion+0x208>)
 8000b5a:	400b      	ands	r3, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_PollForConversion+0x140>
 8000b60:	2354      	movs	r3, #84	@ 0x54
 8000b62:	e000      	b.n	8000b66 <HAL_ADC_PollForConversion+0x142>
 8000b64:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b6c:	e021      	b.n	8000bb2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d01a      	beq.n	8000bac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d007      	beq.n	8000b8c <HAL_ADC_PollForConversion+0x168>
 8000b7c:	f7ff fd9e 	bl	80006bc <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d20f      	bcs.n	8000bac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d90b      	bls.n	8000bac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b98:	f043 0204 	orr.w	r2, r3, #4
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e030      	b.n	8000c0e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d8d9      	bhi.n	8000b6e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f06f 0212 	mvn.w	r2, #18
 8000bc2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000bde:	d115      	bne.n	8000c0c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d111      	bne.n	8000c0c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c04:	f043 0201 	orr.w	r2, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	24924924 	.word	0x24924924
 8000c20:	00924924 	.word	0x00924924
 8000c24:	12492492 	.word	0x12492492
 8000c28:	00492492 	.word	0x00492492
 8000c2c:	00249249 	.word	0x00249249

08000c30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d101      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x20>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e0dc      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x1da>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d81c      	bhi.n	8000cb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	3b05      	subs	r3, #5
 8000c8a:	221f      	movs	r2, #31
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	4019      	ands	r1, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3b05      	subs	r3, #5
 8000ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cb0:	e03c      	b.n	8000d2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b0c      	cmp	r3, #12
 8000cb8:	d81c      	bhi.n	8000cf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b23      	subs	r3, #35	@ 0x23
 8000ccc:	221f      	movs	r2, #31
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4019      	ands	r1, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3b23      	subs	r3, #35	@ 0x23
 8000ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cf2:	e01b      	b.n	8000d2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	3b41      	subs	r3, #65	@ 0x41
 8000d06:	221f      	movs	r2, #31
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4019      	ands	r1, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3b41      	subs	r3, #65	@ 0x41
 8000d20:	fa00 f203 	lsl.w	r2, r0, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b09      	cmp	r3, #9
 8000d32:	d91c      	bls.n	8000d6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68d9      	ldr	r1, [r3, #12]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	3b1e      	subs	r3, #30
 8000d46:	2207      	movs	r2, #7
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4019      	ands	r1, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	6898      	ldr	r0, [r3, #8]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3b1e      	subs	r3, #30
 8000d60:	fa00 f203 	lsl.w	r2, r0, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	e019      	b.n	8000da2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6919      	ldr	r1, [r3, #16]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	2207      	movs	r2, #7
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4019      	ands	r1, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6898      	ldr	r0, [r3, #8]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b10      	cmp	r3, #16
 8000da8:	d003      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dae:	2b11      	cmp	r3, #17
 8000db0:	d132      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d125      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d126      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000dd8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	d11a      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <HAL_ADC_ConfigChannel+0x1ec>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	0c9a      	lsrs	r2, r3, #18
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df8:	e002      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f9      	bne.n	8000dfa <HAL_ADC_ConfigChannel+0x1b2>
 8000e06:	e007      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0c:	f043 0220 	orr.w	r2, r3, #32
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40012400 	.word	0x40012400
 8000e30:	20000000 	.word	0x20000000
 8000e34:	431bde83 	.word	0x431bde83

08000e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d040      	beq.n	8000ed8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0201 	orr.w	r2, r2, #1
 8000e64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <ADC_Enable+0xac>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee8 <ADC_Enable+0xb0>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e74:	e002      	b.n	8000e7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f9      	bne.n	8000e76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e82:	f7ff fc1b 	bl	80006bc <HAL_GetTick>
 8000e86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e88:	e01f      	b.n	8000eca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e8a:	f7ff fc17 	bl	80006bc <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d918      	bls.n	8000eca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d011      	beq.n	8000eca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eaa:	f043 0210 	orr.w	r2, r3, #16
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e007      	b.n	8000eda <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d1d8      	bne.n	8000e8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83

08000eec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d12e      	bne.n	8000f64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f16:	f7ff fbd1 	bl	80006bc <HAL_GetTick>
 8000f1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1c:	e01b      	b.n	8000f56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f1e:	f7ff fbcd 	bl	80006bc <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d914      	bls.n	8000f56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10d      	bne.n	8000f56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3e:	f043 0210 	orr.w	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e007      	b.n	8000f66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d0dc      	beq.n	8000f1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff90 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff49 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff5e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff90 	bl	8001028 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5f 	bl	8000fd4 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb0 	bl	800108c <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b08b      	sub	sp, #44	@ 0x2c
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e169      	b.n	8001420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800114c:	2201      	movs	r2, #1
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8158 	bne.w	800141a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a9a      	ldr	r2, [pc, #616]	@ (80013d8 <HAL_GPIO_Init+0x2a0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d05e      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001174:	4a98      	ldr	r2, [pc, #608]	@ (80013d8 <HAL_GPIO_Init+0x2a0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d875      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 800117a:	4a98      	ldr	r2, [pc, #608]	@ (80013dc <HAL_GPIO_Init+0x2a4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d058      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001180:	4a96      	ldr	r2, [pc, #600]	@ (80013dc <HAL_GPIO_Init+0x2a4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d86f      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 8001186:	4a96      	ldr	r2, [pc, #600]	@ (80013e0 <HAL_GPIO_Init+0x2a8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d052      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 800118c:	4a94      	ldr	r2, [pc, #592]	@ (80013e0 <HAL_GPIO_Init+0x2a8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d869      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 8001192:	4a94      	ldr	r2, [pc, #592]	@ (80013e4 <HAL_GPIO_Init+0x2ac>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d04c      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001198:	4a92      	ldr	r2, [pc, #584]	@ (80013e4 <HAL_GPIO_Init+0x2ac>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d863      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 800119e:	4a92      	ldr	r2, [pc, #584]	@ (80013e8 <HAL_GPIO_Init+0x2b0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d046      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 80011a4:	4a90      	ldr	r2, [pc, #576]	@ (80013e8 <HAL_GPIO_Init+0x2b0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d85d      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d82a      	bhi.n	8001204 <HAL_GPIO_Init+0xcc>
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d859      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 80011b2:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <HAL_GPIO_Init+0x80>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	08001233 	.word	0x08001233
 80011bc:	0800120d 	.word	0x0800120d
 80011c0:	0800121f 	.word	0x0800121f
 80011c4:	08001261 	.word	0x08001261
 80011c8:	08001267 	.word	0x08001267
 80011cc:	08001267 	.word	0x08001267
 80011d0:	08001267 	.word	0x08001267
 80011d4:	08001267 	.word	0x08001267
 80011d8:	08001267 	.word	0x08001267
 80011dc:	08001267 	.word	0x08001267
 80011e0:	08001267 	.word	0x08001267
 80011e4:	08001267 	.word	0x08001267
 80011e8:	08001267 	.word	0x08001267
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001267 	.word	0x08001267
 80011f4:	08001267 	.word	0x08001267
 80011f8:	08001267 	.word	0x08001267
 80011fc:	08001215 	.word	0x08001215
 8001200:	08001229 	.word	0x08001229
 8001204:	4a79      	ldr	r2, [pc, #484]	@ (80013ec <HAL_GPIO_Init+0x2b4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800120a:	e02c      	b.n	8001266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e029      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	3304      	adds	r3, #4
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e024      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	3308      	adds	r3, #8
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e01f      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	330c      	adds	r3, #12
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e01a      	b.n	8001268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123a:	2304      	movs	r3, #4
 800123c:	623b      	str	r3, [r7, #32]
          break;
 800123e:	e013      	b.n	8001268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	611a      	str	r2, [r3, #16]
          break;
 8001252:	e009      	b.n	8001268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001254:	2308      	movs	r3, #8
 8001256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	615a      	str	r2, [r3, #20]
          break;
 800125e:	e003      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x130>
          break;
 8001266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	@ 0xff
 800126c:	d801      	bhi.n	8001272 <HAL_GPIO_Init+0x13a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e001      	b.n	8001276 <HAL_GPIO_Init+0x13e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3304      	adds	r3, #4
 8001276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	@ 0xff
 800127c:	d802      	bhi.n	8001284 <HAL_GPIO_Init+0x14c>
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x152>
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	3b08      	subs	r3, #8
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	210f      	movs	r1, #15
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	401a      	ands	r2, r3
 800129c:	6a39      	ldr	r1, [r7, #32]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80b1 	beq.w	800141a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b8:	4b4d      	ldr	r3, [pc, #308]	@ (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a4c      	ldr	r2, [pc, #304]	@ (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d0:	4a48      	ldr	r2, [pc, #288]	@ (80013f4 <HAL_GPIO_Init+0x2bc>)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a40      	ldr	r2, [pc, #256]	@ (80013f8 <HAL_GPIO_Init+0x2c0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d013      	beq.n	8001324 <HAL_GPIO_Init+0x1ec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3f      	ldr	r2, [pc, #252]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1e4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3d      	ldr	r2, [pc, #244]	@ (8001404 <HAL_GPIO_Init+0x2cc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1e0>
 8001314:	2303      	movs	r3, #3
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 8001318:	2304      	movs	r3, #4
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x1ee>
 8001324:	2300      	movs	r3, #0
 8001326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001336:	492f      	ldr	r1, [pc, #188]	@ (80013f4 <HAL_GPIO_Init+0x2bc>)
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	492c      	ldr	r1, [pc, #176]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	608b      	str	r3, [r1, #8]
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	43db      	mvns	r3, r3
 8001366:	4928      	ldr	r1, [pc, #160]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 8001368:	4013      	ands	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	4922      	ldr	r1, [pc, #136]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	60cb      	str	r3, [r1, #12]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	491e      	ldr	r1, [pc, #120]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4918      	ldr	r1, [pc, #96]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4914      	ldr	r1, [pc, #80]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d021      	beq.n	800140c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	490e      	ldr	r1, [pc, #56]	@ (8001408 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e021      	b.n	800141a <HAL_GPIO_Init+0x2e2>
 80013d6:	bf00      	nop
 80013d8:	10320000 	.word	0x10320000
 80013dc:	10310000 	.word	0x10310000
 80013e0:	10220000 	.word	0x10220000
 80013e4:	10210000 	.word	0x10210000
 80013e8:	10120000 	.word	0x10120000
 80013ec:	10110000 	.word	0x10110000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	40011000 	.word	0x40011000
 8001404:	40011400 	.word	0x40011400
 8001408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_GPIO_Init+0x304>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	43db      	mvns	r3, r3
 8001414:	4909      	ldr	r1, [pc, #36]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001416:	4013      	ands	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	3301      	adds	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	fa22 f303 	lsr.w	r3, r2, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	f47f ae8e 	bne.w	800114c <HAL_GPIO_Init+0x14>
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	372c      	adds	r7, #44	@ 0x2c
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e272      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8087 	beq.w	800156e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001460:	4b92      	ldr	r3, [pc, #584]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00c      	beq.n	8001486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800146c:	4b8f      	ldr	r3, [pc, #572]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d112      	bne.n	800149e <HAL_RCC_OscConfig+0x5e>
 8001478:	4b8c      	ldr	r3, [pc, #560]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001484:	d10b      	bne.n	800149e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	4b89      	ldr	r3, [pc, #548]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06c      	beq.n	800156c <HAL_RCC_OscConfig+0x12c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d168      	bne.n	800156c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e24c      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x76>
 80014a8:	4b80      	ldr	r3, [pc, #512]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a7f      	ldr	r2, [pc, #508]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0xd4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b7b      	ldr	r3, [pc, #492]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a7a      	ldr	r2, [pc, #488]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b78      	ldr	r3, [pc, #480]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a77      	ldr	r2, [pc, #476]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xd4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xbc>
 80014e2:	4b72      	ldr	r3, [pc, #456]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a71      	ldr	r2, [pc, #452]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b6f      	ldr	r3, [pc, #444]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xd4>
 80014fc:	4b6b      	ldr	r3, [pc, #428]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6a      	ldr	r2, [pc, #424]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b68      	ldr	r3, [pc, #416]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a67      	ldr	r2, [pc, #412]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff f8ce 	bl	80006bc <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff f8ca 	bl	80006bc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e200      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xe4>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff f8ba 	bl	80006bc <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff f8b6 	bl	80006bc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1ec      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b53      	ldr	r3, [pc, #332]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x10c>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157a:	4b4c      	ldr	r3, [pc, #304]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001586:	4b49      	ldr	r3, [pc, #292]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x18c>
 8001592:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x176>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1c0      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4939      	ldr	r1, [pc, #228]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e03a      	b.n	8001642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <HAL_RCC_OscConfig+0x270>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff f86f 	bl	80006bc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff f86b 	bl	80006bc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1a1      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4927      	ldr	r1, [pc, #156]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <HAL_RCC_OscConfig+0x270>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff f84e 	bl	80006bc <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff f84a 	bl	80006bc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e180      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d03a      	beq.n	80016c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d019      	beq.n	800168a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <HAL_RCC_OscConfig+0x274>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff f82e 	bl	80006bc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff f82a 	bl	80006bc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e160      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f000 face 	bl	8001c24 <RCC_Delay>
 8001688:	e01c      	b.n	80016c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_RCC_OscConfig+0x274>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff f814 	bl	80006bc <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001696:	e00f      	b.n	80016b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff f810 	bl	80006bc <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d908      	bls.n	80016b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e146      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	42420000 	.word	0x42420000
 80016b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e9      	bne.n	8001698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a6 	beq.w	800181e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b88      	ldr	r3, [pc, #544]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a87      	ldr	r2, [pc, #540]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b85      	ldr	r3, [pc, #532]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fa:	2301      	movs	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b82      	ldr	r3, [pc, #520]	@ (8001908 <HAL_RCC_OscConfig+0x4c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d118      	bne.n	800173c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b7f      	ldr	r3, [pc, #508]	@ (8001908 <HAL_RCC_OscConfig+0x4c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7e      	ldr	r2, [pc, #504]	@ (8001908 <HAL_RCC_OscConfig+0x4c8>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001716:	f7fe ffd1 	bl	80006bc <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7fe ffcd 	bl	80006bc <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	@ 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e103      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4b75      	ldr	r3, [pc, #468]	@ (8001908 <HAL_RCC_OscConfig+0x4c8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x312>
 8001744:	4b6f      	ldr	r3, [pc, #444]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a6e      	ldr	r2, [pc, #440]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e02d      	b.n	80017ae <HAL_RCC_OscConfig+0x36e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x334>
 800175a:	4b6a      	ldr	r3, [pc, #424]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a69      	ldr	r2, [pc, #420]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	4b67      	ldr	r3, [pc, #412]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a66      	ldr	r2, [pc, #408]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	e01c      	b.n	80017ae <HAL_RCC_OscConfig+0x36e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d10c      	bne.n	8001796 <HAL_RCC_OscConfig+0x356>
 800177c:	4b61      	ldr	r3, [pc, #388]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a60      	ldr	r2, [pc, #384]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	4b5e      	ldr	r3, [pc, #376]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a5d      	ldr	r2, [pc, #372]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6213      	str	r3, [r2, #32]
 8001794:	e00b      	b.n	80017ae <HAL_RCC_OscConfig+0x36e>
 8001796:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a5a      	ldr	r2, [pc, #360]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	4b58      	ldr	r3, [pc, #352]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a57      	ldr	r2, [pc, #348]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d015      	beq.n	80017e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7fe ff81 	bl	80006bc <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7fe ff7d 	bl	80006bc <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0b1      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <HAL_RCC_OscConfig+0x37e>
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7fe ff6b 	bl	80006bc <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7fe ff67 	bl	80006bc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e09b      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	4b40      	ldr	r3, [pc, #256]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ee      	bne.n	80017ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d105      	bne.n	800181e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b3c      	ldr	r3, [pc, #240]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a3b      	ldr	r2, [pc, #236]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8087 	beq.w	8001936 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001828:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d061      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d146      	bne.n	80018ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183c:	4b33      	ldr	r3, [pc, #204]	@ (800190c <HAL_RCC_OscConfig+0x4cc>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7fe ff3b 	bl	80006bc <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7fe ff37 	bl	80006bc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e06d      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185c:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4921      	ldr	r1, [pc, #132]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001884:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a19      	ldr	r1, [r3, #32]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	430b      	orrs	r3, r1
 8001896:	491b      	ldr	r1, [pc, #108]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_RCC_OscConfig+0x4cc>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7fe ff0b 	bl	80006bc <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7fe ff07 	bl	80006bc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e03d      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x46a>
 80018c8:	e035      	b.n	8001936 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_RCC_OscConfig+0x4cc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7fe fef4 	bl	80006bc <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe fef0 	bl	80006bc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e026      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x498>
 80018f6:	e01e      	b.n	8001936 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e019      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
 800190c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_OscConfig+0x500>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0d0      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b6a      	ldr	r3, [pc, #424]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b67      	ldr	r3, [pc, #412]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4965      	ldr	r1, [pc, #404]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e073      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b39      	ldr	r3, [pc, #228]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4936      	ldr	r1, [pc, #216]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7fe fe42 	bl	80006bc <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7fe fe3e 	bl	80006bc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e053      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4922      	ldr	r1, [pc, #136]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1cc>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fda0 	bl	8000638 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08002d0c 	.word	0x08002d0c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x94>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x30>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x36>
 8001b46:	e027      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	613b      	str	r3, [r7, #16]
      break;
 8001b4c:	e027      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x94>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0c5b      	lsrs	r3, r3, #17
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7a:	fb03 f202 	mul.w	r2, r3, r2
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e004      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	613b      	str	r3, [r7, #16]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9e:	693b      	ldr	r3, [r7, #16]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	007a1200 	.word	0x007a1200
 8001bb4:	08002d24 	.word	0x08002d24
 8001bb8:	08002d34 	.word	0x08002d34
 8001bbc:	003d0900 	.word	0x003d0900

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	@ (8001bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff2 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	@ (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08002d1c 	.word	0x08002d1c

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0adb      	lsrs	r3, r3, #11
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	@ (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08002d1c 	.word	0x08002d1c

08001c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <RCC_Delay+0x34>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <RCC_Delay+0x38>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0a5b      	lsrs	r3, r3, #9
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c40:	bf00      	nop
  }
  while (Delay --);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	60fa      	str	r2, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f9      	bne.n	8001c40 <RCC_Delay+0x1c>
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	10624dd3 	.word	0x10624dd3

08001c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d07d      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c80:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	61d3      	str	r3, [r2, #28]
 8001c98:	4b49      	ldr	r3, [pc, #292]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b46      	ldr	r3, [pc, #280]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d118      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb4:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fcfc 	bl	80006bc <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	e008      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7fe fcf8 	bl	80006bc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e06d      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce6:	4b36      	ldr	r3, [pc, #216]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d02e      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d027      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d14:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d1a:	4a29      	ldr	r2, [pc, #164]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d014      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fcc7 	bl	80006bc <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe fcc3 	bl	80006bc <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e036      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4917      	ldr	r1, [pc, #92]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	490b      	ldr	r1, [pc, #44]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4904      	ldr	r1, [pc, #16]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42420440 	.word	0x42420440

08001dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	f200 808a 	bhi.w	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d045      	beq.n	8001e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d075      	beq.n	8001eee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e02:	e082      	b.n	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001e04:	4b46      	ldr	r3, [pc, #280]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e0a:	4b45      	ldr	r3, [pc, #276]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d07b      	beq.n	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a41      	ldr	r2, [pc, #260]	@ (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0c5b      	lsrs	r3, r3, #17
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e48:	4a38      	ldr	r2, [pc, #224]	@ (8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e004      	b.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	@ (8001f30 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e64:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e70:	d102      	bne.n	8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	61bb      	str	r3, [r7, #24]
      break;
 8001e76:	e04a      	b.n	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
      break;
 8001e86:	e042      	b.n	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001e88:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e98:	d108      	bne.n	8001eac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	e01f      	b.n	8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001ec4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	e00f      	b.n	8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ed6:	d11c      	bne.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d016      	beq.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001ee4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001ee8:	61bb      	str	r3, [r7, #24]
      break;
 8001eea:	e012      	b.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001eec:	e011      	b.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001eee:	f7ff fe85 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0b9b      	lsrs	r3, r3, #14
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	61bb      	str	r3, [r7, #24]
      break;
 8001f08:	e004      	b.n	8001f14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f12:	bf00      	nop
    }
  }
  return (frequency);
 8001f14:	69bb      	ldr	r3, [r7, #24]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08002d38 	.word	0x08002d38
 8001f28:	08002d48 	.word	0x08002d48
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	003d0900 	.word	0x003d0900
 8001f34:	aaaaaaab 	.word	0xaaaaaaab

08001f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e042      	b.n	8001fd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fa7a 	bl	8000458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	@ 0x24
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f971 	bl	8002264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d175      	bne.n	80020e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_UART_Transmit+0x2c>
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e06e      	b.n	80020e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2221      	movs	r2, #33	@ 0x21
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002016:	f7fe fb51 	bl	80006bc <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002030:	d108      	bne.n	8002044 <HAL_UART_Transmit+0x6c>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d104      	bne.n	8002044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	e003      	b.n	800204c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800204c:	e02e      	b.n	80020ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f848 	bl	80020ee <UART_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e03a      	b.n	80020e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10b      	bne.n	800208e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3302      	adds	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e007      	b.n	800209e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1cb      	bne.n	800204e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2200      	movs	r2, #0
 80020be:	2140      	movs	r1, #64	@ 0x40
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f814 	bl	80020ee <UART_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e006      	b.n	80020e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020fe:	e03b      	b.n	8002178 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d037      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002108:	f7fe fad8 	bl	80006bc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d302      	bcc.n	800211e <UART_WaitOnFlagUntilTimeout+0x30>
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e03a      	b.n	8002198 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b80      	cmp	r3, #128	@ 0x80
 8002134:	d020      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b40      	cmp	r3, #64	@ 0x40
 800213a:	d01d      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d116      	bne.n	8002178 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f81d 	bl	80021a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2208      	movs	r2, #8
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e00f      	b.n	8002198 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	429a      	cmp	r2, r3
 8002194:	d0b4      	beq.n	8002100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b095      	sub	sp, #84	@ 0x54
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b2:	e853 3f00 	ldrex	r3, [r3]
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021d0:	e841 2300 	strex	r3, r2, [r1]
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e5      	bne.n	80021a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3314      	adds	r3, #20
 80021e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	e853 3f00 	ldrex	r3, [r3]
 80021ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002204:	e841 2300 	strex	r3, r2, [r1]
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e5      	bne.n	80021dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	2b01      	cmp	r3, #1
 8002216:	d119      	bne.n	800224c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	330c      	adds	r3, #12
 800221e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	e853 3f00 	ldrex	r3, [r3]
 8002226:	60bb      	str	r3, [r7, #8]
   return(result);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f023 0310 	bic.w	r3, r3, #16
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002238:	61ba      	str	r2, [r7, #24]
 800223a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	e841 2300 	strex	r3, r2, [r1]
 8002244:	613b      	str	r3, [r7, #16]
   return(result);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e5      	bne.n	8002218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800225a:	bf00      	nop
 800225c:	3754      	adds	r7, #84	@ 0x54
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800229e:	f023 030c 	bic.w	r3, r3, #12
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002378 <UART_SetConfig+0x114>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022cc:	f7ff fc96 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	e002      	b.n	80022da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022d4:	f7ff fc7e 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 80022d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	4a22      	ldr	r2, [pc, #136]	@ (800237c <UART_SetConfig+0x118>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	0119      	lsls	r1, r3, #4
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002310:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <UART_SetConfig+0x118>)
 8002312:	fba3 0302 	umull	r0, r3, r3, r2
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2064      	movs	r0, #100	@ 0x64
 800231a:	fb00 f303 	mul.w	r3, r0, r3
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	3332      	adds	r3, #50	@ 0x32
 8002324:	4a15      	ldr	r2, [pc, #84]	@ (800237c <UART_SetConfig+0x118>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002330:	4419      	add	r1, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009a      	lsls	r2, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <UART_SetConfig+0x118>)
 800234a:	fba3 0302 	umull	r0, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2064      	movs	r0, #100	@ 0x64
 8002352:	fb00 f303 	mul.w	r3, r0, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	3332      	adds	r3, #50	@ 0x32
 800235c:	4a07      	ldr	r2, [pc, #28]	@ (800237c <UART_SetConfig+0x118>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	440a      	add	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40013800 	.word	0x40013800
 800237c:	51eb851f 	.word	0x51eb851f

08002380 <siprintf>:
 8002380:	b40e      	push	{r1, r2, r3}
 8002382:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002386:	b500      	push	{lr}
 8002388:	b09c      	sub	sp, #112	@ 0x70
 800238a:	ab1d      	add	r3, sp, #116	@ 0x74
 800238c:	9002      	str	r0, [sp, #8]
 800238e:	9006      	str	r0, [sp, #24]
 8002390:	9107      	str	r1, [sp, #28]
 8002392:	9104      	str	r1, [sp, #16]
 8002394:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <siprintf+0x38>)
 8002396:	4909      	ldr	r1, [pc, #36]	@ (80023bc <siprintf+0x3c>)
 8002398:	f853 2b04 	ldr.w	r2, [r3], #4
 800239c:	9105      	str	r1, [sp, #20]
 800239e:	6800      	ldr	r0, [r0, #0]
 80023a0:	a902      	add	r1, sp, #8
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	f000 f992 	bl	80026cc <_svfiprintf_r>
 80023a8:	2200      	movs	r2, #0
 80023aa:	9b02      	ldr	r3, [sp, #8]
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	b01c      	add	sp, #112	@ 0x70
 80023b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80023b4:	b003      	add	sp, #12
 80023b6:	4770      	bx	lr
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	ffff0208 	.word	0xffff0208

080023c0 <memset>:
 80023c0:	4603      	mov	r3, r0
 80023c2:	4402      	add	r2, r0
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d100      	bne.n	80023ca <memset+0xa>
 80023c8:	4770      	bx	lr
 80023ca:	f803 1b01 	strb.w	r1, [r3], #1
 80023ce:	e7f9      	b.n	80023c4 <memset+0x4>

080023d0 <__errno>:
 80023d0:	4b01      	ldr	r3, [pc, #4]	@ (80023d8 <__errno+0x8>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	2000000c 	.word	0x2000000c

080023dc <__libc_init_array>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	2600      	movs	r6, #0
 80023e0:	4d0c      	ldr	r5, [pc, #48]	@ (8002414 <__libc_init_array+0x38>)
 80023e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002418 <__libc_init_array+0x3c>)
 80023e4:	1b64      	subs	r4, r4, r5
 80023e6:	10a4      	asrs	r4, r4, #2
 80023e8:	42a6      	cmp	r6, r4
 80023ea:	d109      	bne.n	8002400 <__libc_init_array+0x24>
 80023ec:	f000 fc78 	bl	8002ce0 <_init>
 80023f0:	2600      	movs	r6, #0
 80023f2:	4d0a      	ldr	r5, [pc, #40]	@ (800241c <__libc_init_array+0x40>)
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <__libc_init_array+0x44>)
 80023f6:	1b64      	subs	r4, r4, r5
 80023f8:	10a4      	asrs	r4, r4, #2
 80023fa:	42a6      	cmp	r6, r4
 80023fc:	d105      	bne.n	800240a <__libc_init_array+0x2e>
 80023fe:	bd70      	pop	{r4, r5, r6, pc}
 8002400:	f855 3b04 	ldr.w	r3, [r5], #4
 8002404:	4798      	blx	r3
 8002406:	3601      	adds	r6, #1
 8002408:	e7ee      	b.n	80023e8 <__libc_init_array+0xc>
 800240a:	f855 3b04 	ldr.w	r3, [r5], #4
 800240e:	4798      	blx	r3
 8002410:	3601      	adds	r6, #1
 8002412:	e7f2      	b.n	80023fa <__libc_init_array+0x1e>
 8002414:	08002d88 	.word	0x08002d88
 8002418:	08002d88 	.word	0x08002d88
 800241c:	08002d88 	.word	0x08002d88
 8002420:	08002d8c 	.word	0x08002d8c

08002424 <__retarget_lock_acquire_recursive>:
 8002424:	4770      	bx	lr

08002426 <__retarget_lock_release_recursive>:
 8002426:	4770      	bx	lr

08002428 <_free_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	2900      	cmp	r1, #0
 800242e:	d040      	beq.n	80024b2 <_free_r+0x8a>
 8002430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002434:	1f0c      	subs	r4, r1, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	bfb8      	it	lt
 800243a:	18e4      	addlt	r4, r4, r3
 800243c:	f000 f8de 	bl	80025fc <__malloc_lock>
 8002440:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <_free_r+0x8c>)
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	b933      	cbnz	r3, 8002454 <_free_r+0x2c>
 8002446:	6063      	str	r3, [r4, #4]
 8002448:	6014      	str	r4, [r2, #0]
 800244a:	4628      	mov	r0, r5
 800244c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002450:	f000 b8da 	b.w	8002608 <__malloc_unlock>
 8002454:	42a3      	cmp	r3, r4
 8002456:	d908      	bls.n	800246a <_free_r+0x42>
 8002458:	6820      	ldr	r0, [r4, #0]
 800245a:	1821      	adds	r1, r4, r0
 800245c:	428b      	cmp	r3, r1
 800245e:	bf01      	itttt	eq
 8002460:	6819      	ldreq	r1, [r3, #0]
 8002462:	685b      	ldreq	r3, [r3, #4]
 8002464:	1809      	addeq	r1, r1, r0
 8002466:	6021      	streq	r1, [r4, #0]
 8002468:	e7ed      	b.n	8002446 <_free_r+0x1e>
 800246a:	461a      	mov	r2, r3
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	b10b      	cbz	r3, 8002474 <_free_r+0x4c>
 8002470:	42a3      	cmp	r3, r4
 8002472:	d9fa      	bls.n	800246a <_free_r+0x42>
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	1850      	adds	r0, r2, r1
 8002478:	42a0      	cmp	r0, r4
 800247a:	d10b      	bne.n	8002494 <_free_r+0x6c>
 800247c:	6820      	ldr	r0, [r4, #0]
 800247e:	4401      	add	r1, r0
 8002480:	1850      	adds	r0, r2, r1
 8002482:	4283      	cmp	r3, r0
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	d1e0      	bne.n	800244a <_free_r+0x22>
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4408      	add	r0, r1
 800248e:	6010      	str	r0, [r2, #0]
 8002490:	6053      	str	r3, [r2, #4]
 8002492:	e7da      	b.n	800244a <_free_r+0x22>
 8002494:	d902      	bls.n	800249c <_free_r+0x74>
 8002496:	230c      	movs	r3, #12
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	e7d6      	b.n	800244a <_free_r+0x22>
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	1821      	adds	r1, r4, r0
 80024a0:	428b      	cmp	r3, r1
 80024a2:	bf01      	itttt	eq
 80024a4:	6819      	ldreq	r1, [r3, #0]
 80024a6:	685b      	ldreq	r3, [r3, #4]
 80024a8:	1809      	addeq	r1, r1, r0
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	6054      	str	r4, [r2, #4]
 80024b0:	e7cb      	b.n	800244a <_free_r+0x22>
 80024b2:	bd38      	pop	{r3, r4, r5, pc}
 80024b4:	20000274 	.word	0x20000274

080024b8 <sbrk_aligned>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4e0f      	ldr	r6, [pc, #60]	@ (80024f8 <sbrk_aligned+0x40>)
 80024bc:	460c      	mov	r4, r1
 80024be:	6831      	ldr	r1, [r6, #0]
 80024c0:	4605      	mov	r5, r0
 80024c2:	b911      	cbnz	r1, 80024ca <sbrk_aligned+0x12>
 80024c4:	f000 fbaa 	bl	8002c1c <_sbrk_r>
 80024c8:	6030      	str	r0, [r6, #0]
 80024ca:	4621      	mov	r1, r4
 80024cc:	4628      	mov	r0, r5
 80024ce:	f000 fba5 	bl	8002c1c <_sbrk_r>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	d103      	bne.n	80024de <sbrk_aligned+0x26>
 80024d6:	f04f 34ff 	mov.w	r4, #4294967295
 80024da:	4620      	mov	r0, r4
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
 80024de:	1cc4      	adds	r4, r0, #3
 80024e0:	f024 0403 	bic.w	r4, r4, #3
 80024e4:	42a0      	cmp	r0, r4
 80024e6:	d0f8      	beq.n	80024da <sbrk_aligned+0x22>
 80024e8:	1a21      	subs	r1, r4, r0
 80024ea:	4628      	mov	r0, r5
 80024ec:	f000 fb96 	bl	8002c1c <_sbrk_r>
 80024f0:	3001      	adds	r0, #1
 80024f2:	d1f2      	bne.n	80024da <sbrk_aligned+0x22>
 80024f4:	e7ef      	b.n	80024d6 <sbrk_aligned+0x1e>
 80024f6:	bf00      	nop
 80024f8:	20000270 	.word	0x20000270

080024fc <_malloc_r>:
 80024fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002500:	1ccd      	adds	r5, r1, #3
 8002502:	f025 0503 	bic.w	r5, r5, #3
 8002506:	3508      	adds	r5, #8
 8002508:	2d0c      	cmp	r5, #12
 800250a:	bf38      	it	cc
 800250c:	250c      	movcc	r5, #12
 800250e:	2d00      	cmp	r5, #0
 8002510:	4606      	mov	r6, r0
 8002512:	db01      	blt.n	8002518 <_malloc_r+0x1c>
 8002514:	42a9      	cmp	r1, r5
 8002516:	d904      	bls.n	8002522 <_malloc_r+0x26>
 8002518:	230c      	movs	r3, #12
 800251a:	6033      	str	r3, [r6, #0]
 800251c:	2000      	movs	r0, #0
 800251e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80025f8 <_malloc_r+0xfc>
 8002526:	f000 f869 	bl	80025fc <__malloc_lock>
 800252a:	f8d8 3000 	ldr.w	r3, [r8]
 800252e:	461c      	mov	r4, r3
 8002530:	bb44      	cbnz	r4, 8002584 <_malloc_r+0x88>
 8002532:	4629      	mov	r1, r5
 8002534:	4630      	mov	r0, r6
 8002536:	f7ff ffbf 	bl	80024b8 <sbrk_aligned>
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	4604      	mov	r4, r0
 800253e:	d158      	bne.n	80025f2 <_malloc_r+0xf6>
 8002540:	f8d8 4000 	ldr.w	r4, [r8]
 8002544:	4627      	mov	r7, r4
 8002546:	2f00      	cmp	r7, #0
 8002548:	d143      	bne.n	80025d2 <_malloc_r+0xd6>
 800254a:	2c00      	cmp	r4, #0
 800254c:	d04b      	beq.n	80025e6 <_malloc_r+0xea>
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	4639      	mov	r1, r7
 8002552:	4630      	mov	r0, r6
 8002554:	eb04 0903 	add.w	r9, r4, r3
 8002558:	f000 fb60 	bl	8002c1c <_sbrk_r>
 800255c:	4581      	cmp	r9, r0
 800255e:	d142      	bne.n	80025e6 <_malloc_r+0xea>
 8002560:	6821      	ldr	r1, [r4, #0]
 8002562:	4630      	mov	r0, r6
 8002564:	1a6d      	subs	r5, r5, r1
 8002566:	4629      	mov	r1, r5
 8002568:	f7ff ffa6 	bl	80024b8 <sbrk_aligned>
 800256c:	3001      	adds	r0, #1
 800256e:	d03a      	beq.n	80025e6 <_malloc_r+0xea>
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	442b      	add	r3, r5
 8002574:	6023      	str	r3, [r4, #0]
 8002576:	f8d8 3000 	ldr.w	r3, [r8]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	bb62      	cbnz	r2, 80025d8 <_malloc_r+0xdc>
 800257e:	f8c8 7000 	str.w	r7, [r8]
 8002582:	e00f      	b.n	80025a4 <_malloc_r+0xa8>
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	1b52      	subs	r2, r2, r5
 8002588:	d420      	bmi.n	80025cc <_malloc_r+0xd0>
 800258a:	2a0b      	cmp	r2, #11
 800258c:	d917      	bls.n	80025be <_malloc_r+0xc2>
 800258e:	1961      	adds	r1, r4, r5
 8002590:	42a3      	cmp	r3, r4
 8002592:	6025      	str	r5, [r4, #0]
 8002594:	bf18      	it	ne
 8002596:	6059      	strne	r1, [r3, #4]
 8002598:	6863      	ldr	r3, [r4, #4]
 800259a:	bf08      	it	eq
 800259c:	f8c8 1000 	streq.w	r1, [r8]
 80025a0:	5162      	str	r2, [r4, r5]
 80025a2:	604b      	str	r3, [r1, #4]
 80025a4:	4630      	mov	r0, r6
 80025a6:	f000 f82f 	bl	8002608 <__malloc_unlock>
 80025aa:	f104 000b 	add.w	r0, r4, #11
 80025ae:	1d23      	adds	r3, r4, #4
 80025b0:	f020 0007 	bic.w	r0, r0, #7
 80025b4:	1ac2      	subs	r2, r0, r3
 80025b6:	bf1c      	itt	ne
 80025b8:	1a1b      	subne	r3, r3, r0
 80025ba:	50a3      	strne	r3, [r4, r2]
 80025bc:	e7af      	b.n	800251e <_malloc_r+0x22>
 80025be:	6862      	ldr	r2, [r4, #4]
 80025c0:	42a3      	cmp	r3, r4
 80025c2:	bf0c      	ite	eq
 80025c4:	f8c8 2000 	streq.w	r2, [r8]
 80025c8:	605a      	strne	r2, [r3, #4]
 80025ca:	e7eb      	b.n	80025a4 <_malloc_r+0xa8>
 80025cc:	4623      	mov	r3, r4
 80025ce:	6864      	ldr	r4, [r4, #4]
 80025d0:	e7ae      	b.n	8002530 <_malloc_r+0x34>
 80025d2:	463c      	mov	r4, r7
 80025d4:	687f      	ldr	r7, [r7, #4]
 80025d6:	e7b6      	b.n	8002546 <_malloc_r+0x4a>
 80025d8:	461a      	mov	r2, r3
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	42a3      	cmp	r3, r4
 80025de:	d1fb      	bne.n	80025d8 <_malloc_r+0xdc>
 80025e0:	2300      	movs	r3, #0
 80025e2:	6053      	str	r3, [r2, #4]
 80025e4:	e7de      	b.n	80025a4 <_malloc_r+0xa8>
 80025e6:	230c      	movs	r3, #12
 80025e8:	4630      	mov	r0, r6
 80025ea:	6033      	str	r3, [r6, #0]
 80025ec:	f000 f80c 	bl	8002608 <__malloc_unlock>
 80025f0:	e794      	b.n	800251c <_malloc_r+0x20>
 80025f2:	6005      	str	r5, [r0, #0]
 80025f4:	e7d6      	b.n	80025a4 <_malloc_r+0xa8>
 80025f6:	bf00      	nop
 80025f8:	20000274 	.word	0x20000274

080025fc <__malloc_lock>:
 80025fc:	4801      	ldr	r0, [pc, #4]	@ (8002604 <__malloc_lock+0x8>)
 80025fe:	f7ff bf11 	b.w	8002424 <__retarget_lock_acquire_recursive>
 8002602:	bf00      	nop
 8002604:	2000026c 	.word	0x2000026c

08002608 <__malloc_unlock>:
 8002608:	4801      	ldr	r0, [pc, #4]	@ (8002610 <__malloc_unlock+0x8>)
 800260a:	f7ff bf0c 	b.w	8002426 <__retarget_lock_release_recursive>
 800260e:	bf00      	nop
 8002610:	2000026c 	.word	0x2000026c

08002614 <__ssputs_r>:
 8002614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002618:	461f      	mov	r7, r3
 800261a:	688e      	ldr	r6, [r1, #8]
 800261c:	4682      	mov	sl, r0
 800261e:	42be      	cmp	r6, r7
 8002620:	460c      	mov	r4, r1
 8002622:	4690      	mov	r8, r2
 8002624:	680b      	ldr	r3, [r1, #0]
 8002626:	d82d      	bhi.n	8002684 <__ssputs_r+0x70>
 8002628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800262c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002630:	d026      	beq.n	8002680 <__ssputs_r+0x6c>
 8002632:	6965      	ldr	r5, [r4, #20]
 8002634:	6909      	ldr	r1, [r1, #16]
 8002636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800263a:	eba3 0901 	sub.w	r9, r3, r1
 800263e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002642:	1c7b      	adds	r3, r7, #1
 8002644:	444b      	add	r3, r9
 8002646:	106d      	asrs	r5, r5, #1
 8002648:	429d      	cmp	r5, r3
 800264a:	bf38      	it	cc
 800264c:	461d      	movcc	r5, r3
 800264e:	0553      	lsls	r3, r2, #21
 8002650:	d527      	bpl.n	80026a2 <__ssputs_r+0x8e>
 8002652:	4629      	mov	r1, r5
 8002654:	f7ff ff52 	bl	80024fc <_malloc_r>
 8002658:	4606      	mov	r6, r0
 800265a:	b360      	cbz	r0, 80026b6 <__ssputs_r+0xa2>
 800265c:	464a      	mov	r2, r9
 800265e:	6921      	ldr	r1, [r4, #16]
 8002660:	f000 fafa 	bl	8002c58 <memcpy>
 8002664:	89a3      	ldrh	r3, [r4, #12]
 8002666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800266a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266e:	81a3      	strh	r3, [r4, #12]
 8002670:	6126      	str	r6, [r4, #16]
 8002672:	444e      	add	r6, r9
 8002674:	6026      	str	r6, [r4, #0]
 8002676:	463e      	mov	r6, r7
 8002678:	6165      	str	r5, [r4, #20]
 800267a:	eba5 0509 	sub.w	r5, r5, r9
 800267e:	60a5      	str	r5, [r4, #8]
 8002680:	42be      	cmp	r6, r7
 8002682:	d900      	bls.n	8002686 <__ssputs_r+0x72>
 8002684:	463e      	mov	r6, r7
 8002686:	4632      	mov	r2, r6
 8002688:	4641      	mov	r1, r8
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	f000 faac 	bl	8002be8 <memmove>
 8002690:	2000      	movs	r0, #0
 8002692:	68a3      	ldr	r3, [r4, #8]
 8002694:	1b9b      	subs	r3, r3, r6
 8002696:	60a3      	str	r3, [r4, #8]
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	4433      	add	r3, r6
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a2:	462a      	mov	r2, r5
 80026a4:	f000 fae6 	bl	8002c74 <_realloc_r>
 80026a8:	4606      	mov	r6, r0
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d1e0      	bne.n	8002670 <__ssputs_r+0x5c>
 80026ae:	4650      	mov	r0, sl
 80026b0:	6921      	ldr	r1, [r4, #16]
 80026b2:	f7ff feb9 	bl	8002428 <_free_r>
 80026b6:	230c      	movs	r3, #12
 80026b8:	f8ca 3000 	str.w	r3, [sl]
 80026bc:	89a3      	ldrh	r3, [r4, #12]
 80026be:	f04f 30ff 	mov.w	r0, #4294967295
 80026c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026c6:	81a3      	strh	r3, [r4, #12]
 80026c8:	e7e9      	b.n	800269e <__ssputs_r+0x8a>
	...

080026cc <_svfiprintf_r>:
 80026cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	4698      	mov	r8, r3
 80026d2:	898b      	ldrh	r3, [r1, #12]
 80026d4:	4607      	mov	r7, r0
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	460d      	mov	r5, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	b09d      	sub	sp, #116	@ 0x74
 80026de:	d510      	bpl.n	8002702 <_svfiprintf_r+0x36>
 80026e0:	690b      	ldr	r3, [r1, #16]
 80026e2:	b973      	cbnz	r3, 8002702 <_svfiprintf_r+0x36>
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	f7ff ff09 	bl	80024fc <_malloc_r>
 80026ea:	6028      	str	r0, [r5, #0]
 80026ec:	6128      	str	r0, [r5, #16]
 80026ee:	b930      	cbnz	r0, 80026fe <_svfiprintf_r+0x32>
 80026f0:	230c      	movs	r3, #12
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	b01d      	add	sp, #116	@ 0x74
 80026fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fe:	2340      	movs	r3, #64	@ 0x40
 8002700:	616b      	str	r3, [r5, #20]
 8002702:	2300      	movs	r3, #0
 8002704:	9309      	str	r3, [sp, #36]	@ 0x24
 8002706:	2320      	movs	r3, #32
 8002708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800270c:	2330      	movs	r3, #48	@ 0x30
 800270e:	f04f 0901 	mov.w	r9, #1
 8002712:	f8cd 800c 	str.w	r8, [sp, #12]
 8002716:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80028b0 <_svfiprintf_r+0x1e4>
 800271a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800271e:	4623      	mov	r3, r4
 8002720:	469a      	mov	sl, r3
 8002722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002726:	b10a      	cbz	r2, 800272c <_svfiprintf_r+0x60>
 8002728:	2a25      	cmp	r2, #37	@ 0x25
 800272a:	d1f9      	bne.n	8002720 <_svfiprintf_r+0x54>
 800272c:	ebba 0b04 	subs.w	fp, sl, r4
 8002730:	d00b      	beq.n	800274a <_svfiprintf_r+0x7e>
 8002732:	465b      	mov	r3, fp
 8002734:	4622      	mov	r2, r4
 8002736:	4629      	mov	r1, r5
 8002738:	4638      	mov	r0, r7
 800273a:	f7ff ff6b 	bl	8002614 <__ssputs_r>
 800273e:	3001      	adds	r0, #1
 8002740:	f000 80a7 	beq.w	8002892 <_svfiprintf_r+0x1c6>
 8002744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002746:	445a      	add	r2, fp
 8002748:	9209      	str	r2, [sp, #36]	@ 0x24
 800274a:	f89a 3000 	ldrb.w	r3, [sl]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 809f 	beq.w	8002892 <_svfiprintf_r+0x1c6>
 8002754:	2300      	movs	r3, #0
 8002756:	f04f 32ff 	mov.w	r2, #4294967295
 800275a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800275e:	f10a 0a01 	add.w	sl, sl, #1
 8002762:	9304      	str	r3, [sp, #16]
 8002764:	9307      	str	r3, [sp, #28]
 8002766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800276a:	931a      	str	r3, [sp, #104]	@ 0x68
 800276c:	4654      	mov	r4, sl
 800276e:	2205      	movs	r2, #5
 8002770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002774:	484e      	ldr	r0, [pc, #312]	@ (80028b0 <_svfiprintf_r+0x1e4>)
 8002776:	f000 fa61 	bl	8002c3c <memchr>
 800277a:	9a04      	ldr	r2, [sp, #16]
 800277c:	b9d8      	cbnz	r0, 80027b6 <_svfiprintf_r+0xea>
 800277e:	06d0      	lsls	r0, r2, #27
 8002780:	bf44      	itt	mi
 8002782:	2320      	movmi	r3, #32
 8002784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002788:	0711      	lsls	r1, r2, #28
 800278a:	bf44      	itt	mi
 800278c:	232b      	movmi	r3, #43	@ 0x2b
 800278e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002792:	f89a 3000 	ldrb.w	r3, [sl]
 8002796:	2b2a      	cmp	r3, #42	@ 0x2a
 8002798:	d015      	beq.n	80027c6 <_svfiprintf_r+0xfa>
 800279a:	4654      	mov	r4, sl
 800279c:	2000      	movs	r0, #0
 800279e:	f04f 0c0a 	mov.w	ip, #10
 80027a2:	9a07      	ldr	r2, [sp, #28]
 80027a4:	4621      	mov	r1, r4
 80027a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027aa:	3b30      	subs	r3, #48	@ 0x30
 80027ac:	2b09      	cmp	r3, #9
 80027ae:	d94b      	bls.n	8002848 <_svfiprintf_r+0x17c>
 80027b0:	b1b0      	cbz	r0, 80027e0 <_svfiprintf_r+0x114>
 80027b2:	9207      	str	r2, [sp, #28]
 80027b4:	e014      	b.n	80027e0 <_svfiprintf_r+0x114>
 80027b6:	eba0 0308 	sub.w	r3, r0, r8
 80027ba:	fa09 f303 	lsl.w	r3, r9, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	46a2      	mov	sl, r4
 80027c2:	9304      	str	r3, [sp, #16]
 80027c4:	e7d2      	b.n	800276c <_svfiprintf_r+0xa0>
 80027c6:	9b03      	ldr	r3, [sp, #12]
 80027c8:	1d19      	adds	r1, r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	9103      	str	r1, [sp, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bfbb      	ittet	lt
 80027d2:	425b      	neglt	r3, r3
 80027d4:	f042 0202 	orrlt.w	r2, r2, #2
 80027d8:	9307      	strge	r3, [sp, #28]
 80027da:	9307      	strlt	r3, [sp, #28]
 80027dc:	bfb8      	it	lt
 80027de:	9204      	strlt	r2, [sp, #16]
 80027e0:	7823      	ldrb	r3, [r4, #0]
 80027e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80027e4:	d10a      	bne.n	80027fc <_svfiprintf_r+0x130>
 80027e6:	7863      	ldrb	r3, [r4, #1]
 80027e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80027ea:	d132      	bne.n	8002852 <_svfiprintf_r+0x186>
 80027ec:	9b03      	ldr	r3, [sp, #12]
 80027ee:	3402      	adds	r4, #2
 80027f0:	1d1a      	adds	r2, r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	9203      	str	r2, [sp, #12]
 80027f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027fa:	9305      	str	r3, [sp, #20]
 80027fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80028b4 <_svfiprintf_r+0x1e8>
 8002800:	2203      	movs	r2, #3
 8002802:	4650      	mov	r0, sl
 8002804:	7821      	ldrb	r1, [r4, #0]
 8002806:	f000 fa19 	bl	8002c3c <memchr>
 800280a:	b138      	cbz	r0, 800281c <_svfiprintf_r+0x150>
 800280c:	2240      	movs	r2, #64	@ 0x40
 800280e:	9b04      	ldr	r3, [sp, #16]
 8002810:	eba0 000a 	sub.w	r0, r0, sl
 8002814:	4082      	lsls	r2, r0
 8002816:	4313      	orrs	r3, r2
 8002818:	3401      	adds	r4, #1
 800281a:	9304      	str	r3, [sp, #16]
 800281c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002820:	2206      	movs	r2, #6
 8002822:	4825      	ldr	r0, [pc, #148]	@ (80028b8 <_svfiprintf_r+0x1ec>)
 8002824:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002828:	f000 fa08 	bl	8002c3c <memchr>
 800282c:	2800      	cmp	r0, #0
 800282e:	d036      	beq.n	800289e <_svfiprintf_r+0x1d2>
 8002830:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <_svfiprintf_r+0x1f0>)
 8002832:	bb1b      	cbnz	r3, 800287c <_svfiprintf_r+0x1b0>
 8002834:	9b03      	ldr	r3, [sp, #12]
 8002836:	3307      	adds	r3, #7
 8002838:	f023 0307 	bic.w	r3, r3, #7
 800283c:	3308      	adds	r3, #8
 800283e:	9303      	str	r3, [sp, #12]
 8002840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002842:	4433      	add	r3, r6
 8002844:	9309      	str	r3, [sp, #36]	@ 0x24
 8002846:	e76a      	b.n	800271e <_svfiprintf_r+0x52>
 8002848:	460c      	mov	r4, r1
 800284a:	2001      	movs	r0, #1
 800284c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002850:	e7a8      	b.n	80027a4 <_svfiprintf_r+0xd8>
 8002852:	2300      	movs	r3, #0
 8002854:	f04f 0c0a 	mov.w	ip, #10
 8002858:	4619      	mov	r1, r3
 800285a:	3401      	adds	r4, #1
 800285c:	9305      	str	r3, [sp, #20]
 800285e:	4620      	mov	r0, r4
 8002860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002864:	3a30      	subs	r2, #48	@ 0x30
 8002866:	2a09      	cmp	r2, #9
 8002868:	d903      	bls.n	8002872 <_svfiprintf_r+0x1a6>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0c6      	beq.n	80027fc <_svfiprintf_r+0x130>
 800286e:	9105      	str	r1, [sp, #20]
 8002870:	e7c4      	b.n	80027fc <_svfiprintf_r+0x130>
 8002872:	4604      	mov	r4, r0
 8002874:	2301      	movs	r3, #1
 8002876:	fb0c 2101 	mla	r1, ip, r1, r2
 800287a:	e7f0      	b.n	800285e <_svfiprintf_r+0x192>
 800287c:	ab03      	add	r3, sp, #12
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	462a      	mov	r2, r5
 8002882:	4638      	mov	r0, r7
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <_svfiprintf_r+0x1f4>)
 8002886:	a904      	add	r1, sp, #16
 8002888:	f3af 8000 	nop.w
 800288c:	1c42      	adds	r2, r0, #1
 800288e:	4606      	mov	r6, r0
 8002890:	d1d6      	bne.n	8002840 <_svfiprintf_r+0x174>
 8002892:	89ab      	ldrh	r3, [r5, #12]
 8002894:	065b      	lsls	r3, r3, #25
 8002896:	f53f af2d 	bmi.w	80026f4 <_svfiprintf_r+0x28>
 800289a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800289c:	e72c      	b.n	80026f8 <_svfiprintf_r+0x2c>
 800289e:	ab03      	add	r3, sp, #12
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	462a      	mov	r2, r5
 80028a4:	4638      	mov	r0, r7
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <_svfiprintf_r+0x1f4>)
 80028a8:	a904      	add	r1, sp, #16
 80028aa:	f000 f87d 	bl	80029a8 <_printf_i>
 80028ae:	e7ed      	b.n	800288c <_svfiprintf_r+0x1c0>
 80028b0:	08002d4a 	.word	0x08002d4a
 80028b4:	08002d50 	.word	0x08002d50
 80028b8:	08002d54 	.word	0x08002d54
 80028bc:	00000000 	.word	0x00000000
 80028c0:	08002615 	.word	0x08002615

080028c4 <_printf_common>:
 80028c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c8:	4616      	mov	r6, r2
 80028ca:	4698      	mov	r8, r3
 80028cc:	688a      	ldr	r2, [r1, #8]
 80028ce:	690b      	ldr	r3, [r1, #16]
 80028d0:	4607      	mov	r7, r0
 80028d2:	4293      	cmp	r3, r2
 80028d4:	bfb8      	it	lt
 80028d6:	4613      	movlt	r3, r2
 80028d8:	6033      	str	r3, [r6, #0]
 80028da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028de:	460c      	mov	r4, r1
 80028e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028e4:	b10a      	cbz	r2, 80028ea <_printf_common+0x26>
 80028e6:	3301      	adds	r3, #1
 80028e8:	6033      	str	r3, [r6, #0]
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	0699      	lsls	r1, r3, #26
 80028ee:	bf42      	ittt	mi
 80028f0:	6833      	ldrmi	r3, [r6, #0]
 80028f2:	3302      	addmi	r3, #2
 80028f4:	6033      	strmi	r3, [r6, #0]
 80028f6:	6825      	ldr	r5, [r4, #0]
 80028f8:	f015 0506 	ands.w	r5, r5, #6
 80028fc:	d106      	bne.n	800290c <_printf_common+0x48>
 80028fe:	f104 0a19 	add.w	sl, r4, #25
 8002902:	68e3      	ldr	r3, [r4, #12]
 8002904:	6832      	ldr	r2, [r6, #0]
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	42ab      	cmp	r3, r5
 800290a:	dc2b      	bgt.n	8002964 <_printf_common+0xa0>
 800290c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002910:	6822      	ldr	r2, [r4, #0]
 8002912:	3b00      	subs	r3, #0
 8002914:	bf18      	it	ne
 8002916:	2301      	movne	r3, #1
 8002918:	0692      	lsls	r2, r2, #26
 800291a:	d430      	bmi.n	800297e <_printf_common+0xba>
 800291c:	4641      	mov	r1, r8
 800291e:	4638      	mov	r0, r7
 8002920:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002924:	47c8      	blx	r9
 8002926:	3001      	adds	r0, #1
 8002928:	d023      	beq.n	8002972 <_printf_common+0xae>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	6922      	ldr	r2, [r4, #16]
 800292e:	f003 0306 	and.w	r3, r3, #6
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf14      	ite	ne
 8002936:	2500      	movne	r5, #0
 8002938:	6833      	ldreq	r3, [r6, #0]
 800293a:	f04f 0600 	mov.w	r6, #0
 800293e:	bf08      	it	eq
 8002940:	68e5      	ldreq	r5, [r4, #12]
 8002942:	f104 041a 	add.w	r4, r4, #26
 8002946:	bf08      	it	eq
 8002948:	1aed      	subeq	r5, r5, r3
 800294a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800294e:	bf08      	it	eq
 8002950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002954:	4293      	cmp	r3, r2
 8002956:	bfc4      	itt	gt
 8002958:	1a9b      	subgt	r3, r3, r2
 800295a:	18ed      	addgt	r5, r5, r3
 800295c:	42b5      	cmp	r5, r6
 800295e:	d11a      	bne.n	8002996 <_printf_common+0xd2>
 8002960:	2000      	movs	r0, #0
 8002962:	e008      	b.n	8002976 <_printf_common+0xb2>
 8002964:	2301      	movs	r3, #1
 8002966:	4652      	mov	r2, sl
 8002968:	4641      	mov	r1, r8
 800296a:	4638      	mov	r0, r7
 800296c:	47c8      	blx	r9
 800296e:	3001      	adds	r0, #1
 8002970:	d103      	bne.n	800297a <_printf_common+0xb6>
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800297a:	3501      	adds	r5, #1
 800297c:	e7c1      	b.n	8002902 <_printf_common+0x3e>
 800297e:	2030      	movs	r0, #48	@ 0x30
 8002980:	18e1      	adds	r1, r4, r3
 8002982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800298c:	4422      	add	r2, r4
 800298e:	3302      	adds	r3, #2
 8002990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002994:	e7c2      	b.n	800291c <_printf_common+0x58>
 8002996:	2301      	movs	r3, #1
 8002998:	4622      	mov	r2, r4
 800299a:	4641      	mov	r1, r8
 800299c:	4638      	mov	r0, r7
 800299e:	47c8      	blx	r9
 80029a0:	3001      	adds	r0, #1
 80029a2:	d0e6      	beq.n	8002972 <_printf_common+0xae>
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7d9      	b.n	800295c <_printf_common+0x98>

080029a8 <_printf_i>:
 80029a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	7e0f      	ldrb	r7, [r1, #24]
 80029ae:	4691      	mov	r9, r2
 80029b0:	2f78      	cmp	r7, #120	@ 0x78
 80029b2:	4680      	mov	r8, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	469a      	mov	sl, r3
 80029b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029be:	d807      	bhi.n	80029d0 <_printf_i+0x28>
 80029c0:	2f62      	cmp	r7, #98	@ 0x62
 80029c2:	d80a      	bhi.n	80029da <_printf_i+0x32>
 80029c4:	2f00      	cmp	r7, #0
 80029c6:	f000 80d3 	beq.w	8002b70 <_printf_i+0x1c8>
 80029ca:	2f58      	cmp	r7, #88	@ 0x58
 80029cc:	f000 80ba 	beq.w	8002b44 <_printf_i+0x19c>
 80029d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029d8:	e03a      	b.n	8002a50 <_printf_i+0xa8>
 80029da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029de:	2b15      	cmp	r3, #21
 80029e0:	d8f6      	bhi.n	80029d0 <_printf_i+0x28>
 80029e2:	a101      	add	r1, pc, #4	@ (adr r1, 80029e8 <_printf_i+0x40>)
 80029e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029e8:	08002a41 	.word	0x08002a41
 80029ec:	08002a55 	.word	0x08002a55
 80029f0:	080029d1 	.word	0x080029d1
 80029f4:	080029d1 	.word	0x080029d1
 80029f8:	080029d1 	.word	0x080029d1
 80029fc:	080029d1 	.word	0x080029d1
 8002a00:	08002a55 	.word	0x08002a55
 8002a04:	080029d1 	.word	0x080029d1
 8002a08:	080029d1 	.word	0x080029d1
 8002a0c:	080029d1 	.word	0x080029d1
 8002a10:	080029d1 	.word	0x080029d1
 8002a14:	08002b57 	.word	0x08002b57
 8002a18:	08002a7f 	.word	0x08002a7f
 8002a1c:	08002b11 	.word	0x08002b11
 8002a20:	080029d1 	.word	0x080029d1
 8002a24:	080029d1 	.word	0x080029d1
 8002a28:	08002b79 	.word	0x08002b79
 8002a2c:	080029d1 	.word	0x080029d1
 8002a30:	08002a7f 	.word	0x08002a7f
 8002a34:	080029d1 	.word	0x080029d1
 8002a38:	080029d1 	.word	0x080029d1
 8002a3c:	08002b19 	.word	0x08002b19
 8002a40:	6833      	ldr	r3, [r6, #0]
 8002a42:	1d1a      	adds	r2, r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6032      	str	r2, [r6, #0]
 8002a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a50:	2301      	movs	r3, #1
 8002a52:	e09e      	b.n	8002b92 <_printf_i+0x1ea>
 8002a54:	6833      	ldr	r3, [r6, #0]
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	1d19      	adds	r1, r3, #4
 8002a5a:	6031      	str	r1, [r6, #0]
 8002a5c:	0606      	lsls	r6, r0, #24
 8002a5e:	d501      	bpl.n	8002a64 <_printf_i+0xbc>
 8002a60:	681d      	ldr	r5, [r3, #0]
 8002a62:	e003      	b.n	8002a6c <_printf_i+0xc4>
 8002a64:	0645      	lsls	r5, r0, #25
 8002a66:	d5fb      	bpl.n	8002a60 <_printf_i+0xb8>
 8002a68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	da03      	bge.n	8002a78 <_printf_i+0xd0>
 8002a70:	232d      	movs	r3, #45	@ 0x2d
 8002a72:	426d      	negs	r5, r5
 8002a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a78:	230a      	movs	r3, #10
 8002a7a:	4859      	ldr	r0, [pc, #356]	@ (8002be0 <_printf_i+0x238>)
 8002a7c:	e011      	b.n	8002aa2 <_printf_i+0xfa>
 8002a7e:	6821      	ldr	r1, [r4, #0]
 8002a80:	6833      	ldr	r3, [r6, #0]
 8002a82:	0608      	lsls	r0, r1, #24
 8002a84:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a88:	d402      	bmi.n	8002a90 <_printf_i+0xe8>
 8002a8a:	0649      	lsls	r1, r1, #25
 8002a8c:	bf48      	it	mi
 8002a8e:	b2ad      	uxthmi	r5, r5
 8002a90:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a92:	6033      	str	r3, [r6, #0]
 8002a94:	bf14      	ite	ne
 8002a96:	230a      	movne	r3, #10
 8002a98:	2308      	moveq	r3, #8
 8002a9a:	4851      	ldr	r0, [pc, #324]	@ (8002be0 <_printf_i+0x238>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002aa2:	6866      	ldr	r6, [r4, #4]
 8002aa4:	2e00      	cmp	r6, #0
 8002aa6:	bfa8      	it	ge
 8002aa8:	6821      	ldrge	r1, [r4, #0]
 8002aaa:	60a6      	str	r6, [r4, #8]
 8002aac:	bfa4      	itt	ge
 8002aae:	f021 0104 	bicge.w	r1, r1, #4
 8002ab2:	6021      	strge	r1, [r4, #0]
 8002ab4:	b90d      	cbnz	r5, 8002aba <_printf_i+0x112>
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d04b      	beq.n	8002b52 <_printf_i+0x1aa>
 8002aba:	4616      	mov	r6, r2
 8002abc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ac0:	fb03 5711 	mls	r7, r3, r1, r5
 8002ac4:	5dc7      	ldrb	r7, [r0, r7]
 8002ac6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002aca:	462f      	mov	r7, r5
 8002acc:	42bb      	cmp	r3, r7
 8002ace:	460d      	mov	r5, r1
 8002ad0:	d9f4      	bls.n	8002abc <_printf_i+0x114>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d10b      	bne.n	8002aee <_printf_i+0x146>
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	07df      	lsls	r7, r3, #31
 8002ada:	d508      	bpl.n	8002aee <_printf_i+0x146>
 8002adc:	6923      	ldr	r3, [r4, #16]
 8002ade:	6861      	ldr	r1, [r4, #4]
 8002ae0:	4299      	cmp	r1, r3
 8002ae2:	bfde      	ittt	le
 8002ae4:	2330      	movle	r3, #48	@ 0x30
 8002ae6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002aea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002aee:	1b92      	subs	r2, r2, r6
 8002af0:	6122      	str	r2, [r4, #16]
 8002af2:	464b      	mov	r3, r9
 8002af4:	4621      	mov	r1, r4
 8002af6:	4640      	mov	r0, r8
 8002af8:	f8cd a000 	str.w	sl, [sp]
 8002afc:	aa03      	add	r2, sp, #12
 8002afe:	f7ff fee1 	bl	80028c4 <_printf_common>
 8002b02:	3001      	adds	r0, #1
 8002b04:	d14a      	bne.n	8002b9c <_printf_i+0x1f4>
 8002b06:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0a:	b004      	add	sp, #16
 8002b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	2778      	movs	r7, #120	@ 0x78
 8002b1a:	4832      	ldr	r0, [pc, #200]	@ (8002be4 <_printf_i+0x23c>)
 8002b1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	6831      	ldr	r1, [r6, #0]
 8002b24:	061f      	lsls	r7, r3, #24
 8002b26:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b2a:	d402      	bmi.n	8002b32 <_printf_i+0x18a>
 8002b2c:	065f      	lsls	r7, r3, #25
 8002b2e:	bf48      	it	mi
 8002b30:	b2ad      	uxthmi	r5, r5
 8002b32:	6031      	str	r1, [r6, #0]
 8002b34:	07d9      	lsls	r1, r3, #31
 8002b36:	bf44      	itt	mi
 8002b38:	f043 0320 	orrmi.w	r3, r3, #32
 8002b3c:	6023      	strmi	r3, [r4, #0]
 8002b3e:	b11d      	cbz	r5, 8002b48 <_printf_i+0x1a0>
 8002b40:	2310      	movs	r3, #16
 8002b42:	e7ab      	b.n	8002a9c <_printf_i+0xf4>
 8002b44:	4826      	ldr	r0, [pc, #152]	@ (8002be0 <_printf_i+0x238>)
 8002b46:	e7e9      	b.n	8002b1c <_printf_i+0x174>
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	f023 0320 	bic.w	r3, r3, #32
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	e7f6      	b.n	8002b40 <_printf_i+0x198>
 8002b52:	4616      	mov	r6, r2
 8002b54:	e7bd      	b.n	8002ad2 <_printf_i+0x12a>
 8002b56:	6833      	ldr	r3, [r6, #0]
 8002b58:	6825      	ldr	r5, [r4, #0]
 8002b5a:	1d18      	adds	r0, r3, #4
 8002b5c:	6961      	ldr	r1, [r4, #20]
 8002b5e:	6030      	str	r0, [r6, #0]
 8002b60:	062e      	lsls	r6, r5, #24
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	d501      	bpl.n	8002b6a <_printf_i+0x1c2>
 8002b66:	6019      	str	r1, [r3, #0]
 8002b68:	e002      	b.n	8002b70 <_printf_i+0x1c8>
 8002b6a:	0668      	lsls	r0, r5, #25
 8002b6c:	d5fb      	bpl.n	8002b66 <_printf_i+0x1be>
 8002b6e:	8019      	strh	r1, [r3, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	4616      	mov	r6, r2
 8002b74:	6123      	str	r3, [r4, #16]
 8002b76:	e7bc      	b.n	8002af2 <_printf_i+0x14a>
 8002b78:	6833      	ldr	r3, [r6, #0]
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	1d1a      	adds	r2, r3, #4
 8002b7e:	6032      	str	r2, [r6, #0]
 8002b80:	681e      	ldr	r6, [r3, #0]
 8002b82:	6862      	ldr	r2, [r4, #4]
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 f859 	bl	8002c3c <memchr>
 8002b8a:	b108      	cbz	r0, 8002b90 <_printf_i+0x1e8>
 8002b8c:	1b80      	subs	r0, r0, r6
 8002b8e:	6060      	str	r0, [r4, #4]
 8002b90:	6863      	ldr	r3, [r4, #4]
 8002b92:	6123      	str	r3, [r4, #16]
 8002b94:	2300      	movs	r3, #0
 8002b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b9a:	e7aa      	b.n	8002af2 <_printf_i+0x14a>
 8002b9c:	4632      	mov	r2, r6
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	4640      	mov	r0, r8
 8002ba2:	6923      	ldr	r3, [r4, #16]
 8002ba4:	47d0      	blx	sl
 8002ba6:	3001      	adds	r0, #1
 8002ba8:	d0ad      	beq.n	8002b06 <_printf_i+0x15e>
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	079b      	lsls	r3, r3, #30
 8002bae:	d413      	bmi.n	8002bd8 <_printf_i+0x230>
 8002bb0:	68e0      	ldr	r0, [r4, #12]
 8002bb2:	9b03      	ldr	r3, [sp, #12]
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	bfb8      	it	lt
 8002bb8:	4618      	movlt	r0, r3
 8002bba:	e7a6      	b.n	8002b0a <_printf_i+0x162>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	47d0      	blx	sl
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	d09d      	beq.n	8002b06 <_printf_i+0x15e>
 8002bca:	3501      	adds	r5, #1
 8002bcc:	68e3      	ldr	r3, [r4, #12]
 8002bce:	9903      	ldr	r1, [sp, #12]
 8002bd0:	1a5b      	subs	r3, r3, r1
 8002bd2:	42ab      	cmp	r3, r5
 8002bd4:	dcf2      	bgt.n	8002bbc <_printf_i+0x214>
 8002bd6:	e7eb      	b.n	8002bb0 <_printf_i+0x208>
 8002bd8:	2500      	movs	r5, #0
 8002bda:	f104 0619 	add.w	r6, r4, #25
 8002bde:	e7f5      	b.n	8002bcc <_printf_i+0x224>
 8002be0:	08002d5b 	.word	0x08002d5b
 8002be4:	08002d6c 	.word	0x08002d6c

08002be8 <memmove>:
 8002be8:	4288      	cmp	r0, r1
 8002bea:	b510      	push	{r4, lr}
 8002bec:	eb01 0402 	add.w	r4, r1, r2
 8002bf0:	d902      	bls.n	8002bf8 <memmove+0x10>
 8002bf2:	4284      	cmp	r4, r0
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	d807      	bhi.n	8002c08 <memmove+0x20>
 8002bf8:	1e43      	subs	r3, r0, #1
 8002bfa:	42a1      	cmp	r1, r4
 8002bfc:	d008      	beq.n	8002c10 <memmove+0x28>
 8002bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c06:	e7f8      	b.n	8002bfa <memmove+0x12>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4402      	add	r2, r0
 8002c0c:	428a      	cmp	r2, r1
 8002c0e:	d100      	bne.n	8002c12 <memmove+0x2a>
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c1a:	e7f7      	b.n	8002c0c <memmove+0x24>

08002c1c <_sbrk_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	2300      	movs	r3, #0
 8002c20:	4d05      	ldr	r5, [pc, #20]	@ (8002c38 <_sbrk_r+0x1c>)
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	f7fd fc8e 	bl	8000548 <_sbrk>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_sbrk_r+0x1a>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_sbrk_r+0x1a>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	20000268 	.word	0x20000268

08002c3c <memchr>:
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	b2c9      	uxtb	r1, r1
 8002c42:	4402      	add	r2, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	d101      	bne.n	8002c4e <memchr+0x12>
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	e003      	b.n	8002c56 <memchr+0x1a>
 8002c4e:	7804      	ldrb	r4, [r0, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	428c      	cmp	r4, r1
 8002c54:	d1f6      	bne.n	8002c44 <memchr+0x8>
 8002c56:	bd10      	pop	{r4, pc}

08002c58 <memcpy>:
 8002c58:	440a      	add	r2, r1
 8002c5a:	4291      	cmp	r1, r2
 8002c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c60:	d100      	bne.n	8002c64 <memcpy+0xc>
 8002c62:	4770      	bx	lr
 8002c64:	b510      	push	{r4, lr}
 8002c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c6a:	4291      	cmp	r1, r2
 8002c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c70:	d1f9      	bne.n	8002c66 <memcpy+0xe>
 8002c72:	bd10      	pop	{r4, pc}

08002c74 <_realloc_r>:
 8002c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4615      	mov	r5, r2
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	b921      	cbnz	r1, 8002c8a <_realloc_r+0x16>
 8002c80:	4611      	mov	r1, r2
 8002c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c86:	f7ff bc39 	b.w	80024fc <_malloc_r>
 8002c8a:	b92a      	cbnz	r2, 8002c98 <_realloc_r+0x24>
 8002c8c:	f7ff fbcc 	bl	8002428 <_free_r>
 8002c90:	2400      	movs	r4, #0
 8002c92:	4620      	mov	r0, r4
 8002c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c98:	f000 f81a 	bl	8002cd0 <_malloc_usable_size_r>
 8002c9c:	4285      	cmp	r5, r0
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	d802      	bhi.n	8002ca8 <_realloc_r+0x34>
 8002ca2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002ca6:	d8f4      	bhi.n	8002c92 <_realloc_r+0x1e>
 8002ca8:	4629      	mov	r1, r5
 8002caa:	4640      	mov	r0, r8
 8002cac:	f7ff fc26 	bl	80024fc <_malloc_r>
 8002cb0:	4607      	mov	r7, r0
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d0ec      	beq.n	8002c90 <_realloc_r+0x1c>
 8002cb6:	42b5      	cmp	r5, r6
 8002cb8:	462a      	mov	r2, r5
 8002cba:	4621      	mov	r1, r4
 8002cbc:	bf28      	it	cs
 8002cbe:	4632      	movcs	r2, r6
 8002cc0:	f7ff ffca 	bl	8002c58 <memcpy>
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	f7ff fbae 	bl	8002428 <_free_r>
 8002ccc:	463c      	mov	r4, r7
 8002cce:	e7e0      	b.n	8002c92 <_realloc_r+0x1e>

08002cd0 <_malloc_usable_size_r>:
 8002cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cd4:	1f18      	subs	r0, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bfbc      	itt	lt
 8002cda:	580b      	ldrlt	r3, [r1, r0]
 8002cdc:	18c0      	addlt	r0, r0, r3
 8002cde:	4770      	bx	lr

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
